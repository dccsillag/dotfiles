(defwindow bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "35px"
                               :anchor "top center")
           :stacking "fg"
           :reserve (struts :distance "35px" :side "top")
           :windowtype "dock"
           :wm-ignore false
           (centerbox :orientation "horizontal" (wmcontrols) (datetime) (sysmonitor)))

(defwidget datetime []
           (box :orientation "horizontal"
                :halign "center"
                :class "datetime"
                (eventbox :onclick "eww open --toggle calendar" "${datetime}")))
(defpoll datetime
         :interval "1s"
         `date +"%a,  %b %d %Y  %H:%M:%S"`)

(defwidget sysmonitor []
           (eventbox :onclick "eww open --toggle graphs"
                     (box :orientation "horizontal"
                          :halign "end"
                          (metric :label "MIC" (literal :content "${mic}"))
                          (metric :label "TEMP" "${EWW_TEMPS.CPU}℃")
                          (metric :label "CPU" "${round(EWW_CPU.avg, 0)}%")
                          (metric :label "RAM" "${round(EWW_RAM.used_mem_perc, 0)}%")
                          (metric :label "SWAP" "${round((EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap, 0)}%"))))
(defwidget metric [label]
           (box :orientation "horizontal"
                :class "metric"
                (box :class "metric-label" "${label}")
                (box :class "metric-value" (children))))
(defpoll mic
         :interval "200ms"
         `if { pacmd list-sources | grep -q "muted: no"; }; then echo "(box :class 'mic-on' 'ON')"; else echo "(box :class 'mic-off' 'OFF')"; fi`)

(defwidget wmcontrols []
           (box :orientation "horizontal"
                :halign "start"
                (workspace-bit)))

(defwidget workspace-bit []
           (box :orientation "horizontal"
                :class "workspace-bit"
                "${workspace_name} "))
(defpoll workspace_name
         :interval "200ms"
         `wmctrl -d | awk '{ print $2,$9 }' | grep '^\*' | cut -d' ' -f2-`)

; ---

(defwindow calendar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "40px"
                               :width "20%"
                               :height "20%"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           (calendar))

; ---

(defwindow graphs
           :monitor 0
           :geometry (geometry :x "-5px"
                               :y "40px"
                               :width "15%"
                               :height "40%"
                               :anchor "top right")
           :stacking "fg"
           ;; :reserve (struts :distance "15%" :side "right")
           :windowtype "dock"
           :wm-ignore false
           (box :orientation "vertical" :space-evenly false
                (box :orientation "horizontal" :space-evenly false
                     (label :class "heading" :hexpand true :markup "<b>System Monitor</b>")
                     ;; (button :class "close-button" :onclick "eww close graphs" "")
                     )
                (box :orientation "vertical" :vexpand true
                     (metricgraph :label "CPU usage" :value "${EWW_CPU.avg}" :valuetext "${round(EWW_CPU.avg,2)}%" :min 0 :max 100)
                     (metricgraph :label "CPU Temperature" :value "${EWW_TEMPS.CPU}" :valuetext "${EWW_TEMPS.CPU}℃" :min 20 :max 120)
                     (metricgraph :label "RAM usage" :value "${EWW_RAM.used_mem_perc}" :valuetext "${round(EWW_RAM.used_mem_perc, 2)}%" :min 0 :max 100)
                     (metricgraph :label "Swap usage" :value "${round((EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap, 2)}" :valuetext "${(EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap}%" :min 0 :max 100))))
(defwidget metricgraph [label value valuetext min max]
           (box :orientation "vertical"
                :class "metricgraph-container"
                :halign "fill"
                :space-evenly false
                (label :class "metricgraph-label" :xalign 0 :text "${label}: ${valuetext} (last 2 minutes)")
                (box :class "metricgraph"
                     :vexpand true
                     (graph :value "${value}" :min min :max max :dynamic true :time-range "2m" :line-style "round"))))

; vim: ft=lisp
