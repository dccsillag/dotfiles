(defwindow bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "32px"
                               :anchor "top center")
           :stacking "fg"
           :reserve (struts :distance "32px" :side "top")
           :windowtype "dock"
           :wm-ignore false
           (centerbox :orientation "horizontal" (sysmonitor) (datetime) (wmcontrols)))

(defwidget datetime []
           (box :orientation "horizontal"
                :halign "center"
                :class "datetime"
                :space-evenly false
                :spacing 18
                "${datetime}"
                (battery)))
(defpoll datetime
         :interval "1s"
         `date +"%a,  %b %d %Y  %H:%M:%S"`)
(defwidget battery []
           (box :orientation "horizontal"
                :class {EWW_BATTERY.BAT0.capacity >= 20 ? "caution-ok" : "caution-danger"}
                :space-evenly false
                :spacing 4
                (box :class "battery-label" "󰂀")
                (box :class "battery-value" {"${EWW_BATTERY.BAT0.capacity}%" + {"Charging": "↑", "Discharging": "↓", "Not charging": " ", "Full": "✓", "Unknown": "?"}[EWW_BATTERY.BAT0.status]})))

(defwidget sysmonitor []
           (box :orientation "horizontal"
                :halign "start"
                :class "metrics"
                :space-evenly false
                :spacing 8
                (box :orientation "horizontal"
                     :space-evenly true
                     (sensor :label " " :value {round(EWW_CPU.avg, 0)} :postfix "%" :threshold-light 10 :threshold-med 30 :threshold-heavy 80)
                     (sensor :label " " :value {round(EWW_RAM.used_mem_perc, 0)} :postfix "%" :threshold-light 10 :threshold-med 40 :threshold-heavy 80)
                     (sensor :label " " :value {round(100 * (EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap, 0)} :postfix "%" :threshold-light 10 :threshold-med 40 :threshold-heavy 80)
                     (sensor :label " " :value {EWW_TEMPS.CORETEMP_PACKAGE_ID_0} :postfix "℃" :threshold-light 55 :threshold-med 65 :threshold-heavy 75))
                ;; (metric :label "󰂀" (caution :t 20 :leq "danger" :gt "ok" :value {EWW_BATTERY.BAT0.capacity} :postfix {"%" + {"Charging": "↑", "Discharging": "↓", "Not charging": " ", "Full": "✓", "Unknown": "?"}[EWW_BATTERY.BAT0.status]}))
                (box :orientation "horizontal" :space-evenly true
                     (indicator :label " " :onoff "${mic}")
                     (indicator :label "󰄀 " :onoff "${camera}"))
                ;; (metric :label "" (literal :content "${mic}"))
                ;; (metric :label "󰄀" (literal :content "${camera}"))
                ))
(defwidget sensor [label threshold-light threshold-med threshold-heavy value postfix]
           (box :orientation "horizontal"
                :class "sensor"
                (box :class {value <= threshold-light ? "sensor-idle" : value <= threshold-med ? "sensor-light" : value <= threshold-heavy ? "sensor-med" : "sensor-heavy"} "${label}")))
(defwidget indicator [label onoff]
           (box :orientation "horizontal"
                :class "indicator"
                (box :class {onoff == "ON" ? "indicator-on" : "indicator-off"} "${label}")))
(defwidget metric [label]
           (box :orientation "horizontal"
                :class "metric"
                (box :class "metric-label" "${label}")
                (box :class "metric-value" (children))))
(defwidget caution [t leq gt value postfix]
           (box :class {value <= t ? "caution-${leq}" : "caution-${gt}"} "${value}${postfix}"))
(defpoll mic
         :interval "200ms"
         `if { pacmd list-sources | grep -q "muted: no"; }; then echo "ON"; else echo "OFF"; fi`)
(defpoll camera
         :interval "1000ms"
         `if [ $(lsmod | grep ^uvcvideo | tr -s ' ' | cut -d' ' -f3) = 0 ]; then echo "OFF"; else echo "ON"; fi`)

(defwidget wmcontrols []
           (box :orientation "horizontal"
                :halign "end"
                (workspace-bit)))

(defwidget workspace-bit []
           (box :orientation "horizontal"
                :class "workspace-bit"
                "${workspace_name}"))
(defpoll workspace_name
         :interval "200ms"
         `wmctrl -d | grep '^[0-9].\\+ \\*' | tr -s ' ' | cut -d' ' -f9-`)

; ---

(defwindow calendar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "40px"
                               :width "20%"
                               :height "20%"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           (calendar))

; ---

(defwindow volume
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "200px"
                               :height "200px"
                               :anchor "center center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           (osd :icon " " :value volume))
(defpoll volume
         :interval "10000ms"
         `pamixer --get-volume`)

(defwindow brightness
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "200px"
                               :height "200px"
                               :anchor "center center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           (osd :icon "󰌵" :value {100 * brightness / max-brightness}))
(defpoll brightness
         :interval "10000ms"
         `brightnessctl get`)
(defpoll max-brightness
         :interval "10000ms"
         `brightnessctl max`)

(defwidget osd [icon value]
           (box :orientation "vertical"
                :space-evenly false
                :spacing 8
                :valign "center"
                :class "osd"
                (box :class "osd-icon" icon)
                (progress :class "asdf" :value value :orientation "horizontal")
                (box :height 10)))

; vim: ft=lisp
