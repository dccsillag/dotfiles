-- Plugins

vim.cmd 'packadd packer.nvim'

plugins = ->
    plug = (name, table) ->
        table or= {}
        table[1] = name
        use table

    plugown = (name, table) ->
        maybepath = "~/code/#{name}"
        local resolved_name
        if (os.execute "[ -d #{maybepath} ]")
            resolved_name = maybepath
        else
            resolved_name = "dccsillag/#{name}"
        plug resolved_name, table

    -- Core
    plug 'wbthomason/packer.nvim' -- plugin manager
    plug 'svermeulen/vimpeccable' -- convenience Lua functions for config
    plug 'LionC/nest.nvim' -- easy API for creating mappings
    plug 'nvim-lua/plenary.nvim' -- convenience Lua functions for plugins

    -- Interface
    plug 'nvim-lualine/lualine.nvim' -- statusline
    plug 'junegunn/fzf', run: './install --bin' -- fuzzy finder
    plug 'ibhagwan/fzf-lua', requires: {'vijaymarupudi/nvim-fzf'} -- fuzzy finder from neovim
    plug 'nvim-telescope/telescope.nvim', requires: {'nvim-lua/plenary.nvim'}
    plug 'SidOfc/carbon.nvim' -- neat and minimal file tree viewer
    plug 'hood/popui.nvim', requires: {"RishabhRD/popfix"} -- pretty and practical UI for vim.ui.select
    plug 'machakann/vim-highlightedyank' -- briefly highlight yanked region
    plug 'edluffy/specs.nvim' -- highlight cursor jumps
    plug 'folke/zen-mode.nvim' -- toggleable zen mode for editing
    plug 'lewis6991/gitsigns.nvim' -- show git diff in the signcolumn
    plug 'junegunn/limelight.vim' -- a spotlight for code, good for presenting bit-by-bit
    plug 'junegunn/goyo.vim' -- make things pretty, for more elegant presentations
    plug 'lukas-reineke/indent-blankline.nvim' -- indent guides
    plug 'romgrk/nvim-treesitter-context' -- show code context on top of the buffer
    plug 'andymass/vim-matchup' -- better delimiter matching
    -- plug 'wellle/context.vim' -- show code context on top of the buffer
    plug 'kshenoy/vim-signature' -- show marks in the sign column
    plug 'rcarriga/nvim-notify' -- show notifications
    plug 'https://gitlab.com/yorickpeterse/nvim-pqf.git' -- prettier quickfix list
    plug 'dstein64/vim-startuptime' -- profile startup time neatly

    -- Behaviour
    plug 'tpope/vim-repeat' -- better `.` key
    plug 'chaoren/vim-wordmotion' -- improve the `w` key and similar
    plug 'haya14busa/vim-asterisk' -- improve `*` and `#`
    plug 'embear/vim-localvimrc' -- for using local [e.g., project-specific] vimrcs
    plug 'vim-scripts/let-modeline.vim' -- have a specific modeline for configuring plugins
    plug 'lambdalisue/suda.vim' -- for editting files which require root permission
    plug 'aymericbeaumet/vim-symlink' -- edit the real file, not symlinks
    plug 'antoinemadec/FixCursorHold.nvim' -- fix CursorHold/CursorHoldI events (https://github.com/neovim/neovim/issues/12587)

    -- Peripherals
    plug 'tpope/vim-eunuch' -- add nice commands for shell commands
    plug 'direnv/direnv.vim' -- direnv integration
    plug 'skywind3000/asyncrun.vim' -- for running stuff in the background, async
    plug 'itspriddle/vim-shellcheck' -- run shellcheck from Vim as a :compiler
    plug 'tpope/vim-fugitive' -- use git from vim
    plug 'junegunn/gv.vim' -- git commit browser
    plugown 'magma-nvim', run: ':UpdateRemotePlugins' -- interact with Jupyter
    plug 'vim-test/vim-test' -- run tests from NeoVim

    -- Completion
    plug 'hrsh7th/nvim-cmp', requires: {"hrsh7th/vim-vsnip"} -- completion framework for NeoVim
    plug 'hrsh7th/cmp-nvim-lsp'
    -- plug 'hrsh7th/cmp-buffer'
    plug 'hrsh7th/cmp-path'
    plug 'Saecki/crates.nvim'

    -- LSP / TreeSitter / Formatting
    plug 'nvim-lua/lsp_extensions.nvim' -- extra easy configurations for LSP
    plug 'neovim/nvim-lspconfig' -- easily configure LSP
    plug 'RRethy/nvim-treesitter-textsubjects' -- treesitter-based text objects
    plug 'nvim-treesitter/playground' -- treesitter playground
    plug 'nvim-treesitter/nvim-treesitter', 'run': ':TSUpdate' -- easy treesitter config
    plug 'stevearc/aerial.nvim' -- show code outline

    -- Color Schemes
    plug 'rktjmp/lush.nvim', branch: 'main' -- easily create color schemes for NeoVim
    plug 'joshdick/onedark.vim' -- onedark colorscheme from Atom
    plug 'pbrisbin/vim-colors-off' -- a plain colorscheme that pretty much disables highlighting
    plug 'arcticicestudio/nord-vim' -- nord colorscheme
    plug 'arzg/vim-substrata' -- a cold, dark colorscheme for Vim

    -- Editing Help
    plug 'rhysd/conflict-marker.vim' -- easily solve git conflicts
    plug 'tpope/vim-surround' -- surround text with stuff [parentheses, brackets, and much more]
    plug 'numToStr/Comment.nvim' -- comment/uncomment code
    plug 'tmsvg/pear-tree' -- automatic delimiter pair closing
    plug 'godlygeek/tabular' -- aligns code
    plug 'dhruvasagar/vim-table-mode' -- painlessly edit tables
    plug 'tommcdo/vim-exchange' -- exchange text around
    plug 'svermeulen/vim-subversive' -- replace text with current yank
    plug 'monaqa/dial.nvim' -- better increment/decrement

    -- Text Objects
    plug 'wellle/targets.vim' -- better text objects
    plug 'michaeljsmith/vim-indent-object' -- text object for indented text
    plug 'kana/vim-textobj-entire' -- text object for the entire buffer
    plug 'kana/vim-textobj-syntax' -- text object for text in the same highlight group
    plug 'kana/vim-textobj-user' -- framework for creating text objects [used by other plugins]

    -- Language Support
    plug 'vim-python/python-syntax' -- better Python syntax highlight
    plug 'petRUShka/vim-sage' -- language support for SageMath
    plug 'Vimjas/vim-python-pep8-indent' -- indent Python code according to PEP8
    plug 'bfrg/vim-cpp-modern' -- better C++ syntax highlight
    plug 'gabrielelana/vim-markdown', requires: {'godlygeek/tabular'} -- better Markdown support
    plug 'lukas-reineke/headlines.nvim' -- better headings for markdown & friends
    plug 'leafo/moonscript-vim' -- language support for {Moon,Yue}Script
    plug 'tomlion/vim-solidity' -- language support for Solidity
    plug 'rubik/vim-dg' -- language support for DogeLang [aka. dg]
    plug 'manicmaniac/coconut.vim' -- language support for Coconut
    plug 'rust-lang/rust.vim' -- better Rust syntax support
    plug 'neovimhaskell/haskell-vim' -- better support for Haskell
    plug 'edwinb/idris2-vim' -- language support for Idris
    plug 'mrk21/yaml-vim' -- better language support for YAML
    plug 'cespare/vim-toml' -- language support for TOML
    plug 'LnL7/vim-nix' -- language support for Nix
    plug 'MaxMEllon/vim-jsx-pretty' -- language support for JSX
    plug 'dart-lang/dart-vim-plugin' -- language support for Dart
    plug 'tikhomirov/vim-glsl' -- language support for GLSL
    plug 'aklt/plantuml-syntax' -- for PlantUML syntax support
    plug 'wlangstroth/vim-racket' -- language support for Racket
    plug 'goerz/jupytext.vim' -- edit Jupyter notebooks in vim
    plug 'pest-parser/pest.vim' -- language support for Pest grammars

import 'packer'
import 'packer.util' as packer_util

packer_config =
    max_jobs: 8
    display:
        open_fn: -> packer_util.float border: 'single'
        working_sym: "•"
        error_sym: "✗"
        done_sym: "✓"
        removed_sym: "-"
        moved_sym: "→"
        header_sym: "━"
packer.startup {plugins, config: packer_config}

-- Plugin configurations
do
    -- vimpeccable
    import 'vimp'
    vimp.always_override = true

    -- statusline
    my_theme = {
        a:
            bg: '#C8ACF6'
            fg: '#000000'
        b:
            bg: '#4F535A'
            fg: '#000000'
            gui: 'bold'
        c:
            bg: '#2F333A'
            fg: '#cccccc'
    }
    (require 'lualine').setup
        options:
            icons_enabled: false
            theme:
                normal: my_theme
                insert: my_theme
                visual: my_theme
                replace: my_theme
                command: my_theme
                inactive: my_theme
            component_separators:
                left: ''
                right: ''
            section_separators:
                left: ''
                right: ''
            always_divide_middle: true
            globalstatus: true
        sections:
            lualine_a: {'filename'}
            -- lualine_b: {'b:gitsigns_status'}
            lualine_b: {}
            lualine_c: {{
                'diff',
                colored: true
                -- diff_color:
                --     added: 'DiffAddStatus'
                --     modified: 'DiffChangeStatus'
                --     removed: 'DiffDeleteStatus'
                source: ->
                    s = vim.b.gitsigns_status_dict
                    {
                        added: s.added
                        modified: s.changed
                        removed: s.removed
                    } if s?
            }}
            lualine_x:
                * 'g:lsp_progress_msg'
                * {
                    'diagnostics',
                    colored: true
                    sections:
                        * 'error'
                        * 'warn'
                        * 'info'
                }
            lualine_y: {}
            lualine_z:
                * ->
                    ft = vim.o.filetype
                    has_lsp = #vim.lsp.buf_get_clients(0) > 0
                    if #ft == 0
                        ""
                    else
                        if has_lsp
                            ft .. "+"
                        else
                            ft
                * 'b:keymap_name'
        extensions:
            * 'aerial'
            * 'fzf'
            * 'fugitive'
            * 'quickfix'

    -- fzf-lua
    (require 'fzf-lua').setup
        fzf_opts:
            "--layout": 'default'
        keymap:
            builtin:
                "<C-l>": "toggle-preview"
            fzf:
                "ctrl-l": "toggle-preview"
        winopts:
            preview:
                hidden: 'hidden'
        lsp:
            severity: "warning"
            icons:
                "Error":
                    icon: "E"
                    color: "red"
                "Warning":
                    icon: "W"
                    color: "yellow"
                "Information":
                    icon: "I"
                    color: "blue"
                "Hint":
                    icon: "H"
                    color: "magenta"

    -- popui
    vim.ui.select = require "popui.ui-overrider"
    vim.g.popui_border_style = "rounded"

    -- specs
    global specs, should_show_specs, maybe_show_specs
    import 'specs'

    should_show_specs = false -- vim.fn.exists('neovide') == 0

    specs.setup
        show_jumps: should_show_specs
        min_jump: 2
        popup:
            delay_ms: 0
            inc_ms: 8
            blend: 60
            width: 25
            winhl: 'Specs'
            fader: specs.empty_fader
            resizer: specs.shrink_resizer
        ignore_filetypes:
            * "dashboard"
        ignore_buftypes:
            "nofile": true

    maybe_show_specs = -> specs.show_specs! if should_show_specs

    -- zen-mode
    (require 'zen-mode').setup!

    -- gitsigns
    (require 'gitsigns').setup
        signcolumn: false
        numhl: true
        linehl: false
        word_diff: true
        keymaps:
            noremap: true
            ['n [c']: { expr: true, "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'" }
            ['n ]c']: { expr: true, "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'" }

            ["n <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk()<CR>'
            ["v <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
            ["n <leader>gu"]: '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>'
            ["n <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk()<CR>'
            ["v <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
            -- ["n <leader>gX"]: '<cmd>lua require"gitsigns".reset_buffer()<CR>'
            ["n <leader>gd"]: '<cmd>lua require"gitsigns".preview_hunk()<CR>'
            ["n <leader>gb"]: '<cmd>lua require"gitsigns".blame_line{full = true}<CR>'

            ["o ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
            ["x ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'

    -- limelight
    vim.g.limelight_conceal_ctermfg = 242
    vim.g.limelight_conceal_guifg = '#606060'

    -- indent-blankline
    vim.g.indent_blankline_char = '│'
    vim.g.indent_blankline_show_trailing_blankline_indent = false
    vim.g.indent_blankline_buftype_exclude =
        * 'terminal'
    vim.g.indent_blankline_filetype_exclude =
        * 'dashboard'
        * 'packer'
        * 'help'
        * 'Outline'
        * 'aerial'

    -- nvim-treesitter-context
    (require 'treesitter-context').setup
        enable: true
        throttle: true
        max_lines: 4
        patterns:
            default:
                * "class"
                * "function"
                * "method"
                * "for"
                * "while"
                * "if"
                * "switch"
                * "case"
            rust:
                * "impl_item"
                * "struct_item"
                * "enum_item"
                * "match_arm"
                * "match_expression"
                * "else_clause"
                * "loop_expression"
                * "mod_item"

    -- context.vim
    -- vim.g.context_nvim_no_redraw = 1

    -- vim-matchup
    vim.g.matchup_matchparen_offscreen = {}

    -- nvim-notify
    vim.notify = require 'notify'
    vim.notify.setup
        stages: "slide"
        timeout: 1000

    -- nvim-pqf
    (require 'pqf').setup!

    -- vim-wordmotion
    vim.g.wordmotion_spaces = ''

    -- vim-localvimrc
    vim.g.localvimrc_persistent = 1
    vim.g.localvimrc_persistence_file = vim.fn.expand "~/.local/misc/localvimrc_persistent"

    -- suda.vim
    vim.g.suda_smart_edit = 1

    -- fugitive
    import map_command, nnoremap from require 'vimp'

    map_command 'Fugitive', ->
        vim.cmd ":G"
        vim.cmd "only"
        nnoremap {"buffer"}, "gq", ":qa!<CR>"

    -- magma-nvim
    vim.g.magma_automatically_open_output = false
    vim.g.magma_show_mimetype_debug = true
    vim.g.magma_image_provider = "ueberzug"

    -- vim-test
    vim.g['test#strategy'] = 'neovim'
    vim.g['test#neovim#start_normal'] = 1
    vim.g['test#basic#start_normal'] = 1

    -- nvim-cmp
    import 'cmp'
    cmp.setup
        -- completion:
        --     autocomplete: false
        mapping:
            "<C-c>": cmp.mapping.complete!
            "<C-l>": cmp.mapping.confirm select: true
            "<C-j>": cmp.mapping.select_next_item behaviour: cmp.SelectBehavior.Select
            "<C-k>": cmp.mapping.select_prev_item behaviour: cmp.SelectBehavior.Select
            "<C-h>": cmp.mapping.close!
        sources:
            * name: "crates"
            * name: "nvim_lsp"
            * name: "path"
            -- * name: "buffer"
        snippet:
            expand: (args) -> vim.fn["vsnip#anonymous"] args.body

    -- crates.nvim
    (require 'crates').setup!

    -- LSP
    do
        import 'lspconfig' as nvim_lsp

        capabilities = (require 'cmp_nvim_lsp').update_capabilities vim.lsp.protocol.make_client_capabilities!
        capabilities.window.workDoneProgress = true

        on_attach = (client) ->
            vim.notify "Ready.", "info", title: "LSP", timeout: 500

            import nnoremap, vnoremap from require 'vimp'

            nnoremap {'silent'}, '<C-k>',      -> vim.lsp.diagnostic.show_line_diagnostics()
            nnoremap {'silent'}, '<C-]>',      -> vim.lsp.buf.definition()
            nnoremap {'silent'}, 'K',          -> vim.lsp.buf.hover()
            nnoremap {'silent'}, 'gd',         -> vim.lsp.buf.definition()
            nnoremap {'silent'}, 'gD',         ":FzfLua lsp_definitions<CR>"
            nnoremap {'silent'}, 'gr',         ":FzfLua lsp_references<CR>"
            nnoremap {'silent'}, 'gR',         -> vim.lsp.buf.references()
            nnoremap {'silent'}, 'gq',         -> vim.lsp.buf.formatting()
            nnoremap {'silent'}, '<Leader>lg', ":FzfLua lsp_live_workspace_symbols<CR>"
            nnoremap {'silent'}, '<Leader>lG', ":FzfLua lsp_document_symbols<CR>"
            nnoremap {'silent'}, '<Leader>li', ":FzfLua lsp_implementations<CR>"
            nnoremap {'silent'}, '<Leader>ld', ":FzfLua lsp_workspace_diagnostics<CR>"
            nnoremap {'silent'}, '<Leader>lD', ":FzfLua lsp_document_diagnostics<CR>"
            nnoremap {'silent'}, '<Leader>lr', -> vim.lsp.buf.rename()
            nnoremap {'silent'}, '<Leader>a',  -> vim.lsp.buf.code_action()
            vnoremap {'silent'}, '<Leader>a',  -> vim.lsp.buf.range_code_action()

            nnoremap {'silent'}, '[g', -> vim.diagnostic.goto_prev()
            nnoremap {'silent'}, ']g', -> vim.diagnostic.goto_next()

        -- Configure LSPs
        nvim_lsp.rust_analyzer.setup
            :capabilities
            :on_attach
            settings:
                ["rust-analyzer"]:
                    checkOnSave:
                        command: "clippy"
                        -- extraArgs:
                        --     * "--target-dir"
                        --     * ".target-rust_analyzer_check"
                    cargo:
                        loadOutDirsFromCheck: true
                    procMacro:
                        enable: true
                    diagnostics:
                        enable: false
        nvim_lsp.clangd.setup
            :capabilities
            :on_attach
            cmd:
                * "clangd"
                * "--background-index"
                * "--clang-tidy"
        nvim_lsp.sumneko_lua.setup
            :capabilities
            :on_attach
            cmd:
                * "lua-language-server"
                * "-E"
                * "/usr/share/lua-language-server/main.lua"
        -- nvim_lsp.pyright.setup
        --     :on_attach
        --     :capabilities
        nvim_lsp.pylsp.setup
            :on_attach
            :capabilities
        nvim_lsp.hls.setup
            :on_attach
            :capabilities
        nvim_lsp.texlab.setup
            :on_attach
            :capabilities
        nvim_lsp.vimls.setup
            :on_attach
            :capabilities
        nvim_lsp.rnix.setup
            :on_attach
            :capabilities

        vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with vim.lsp.diagnostic.on_publish_diagnostics,
                virtual_text: false
                underline: true
                signs: false
                update_in_insert: true

        -- Based on https://git.sr.ht/~whynothugo/lsp_lines.nvim/tree/main/item/lua/lsp_lines/init.lua:
        indentation_regex = vim.regex [[^\s\+]]
        highlight_groups =
            [vim.diagnostic.severity.ERROR]: "DiagnosticVirtualTextError"
            [vim.diagnostic.severity.WARN]: "DiagnosticVirtualTextWarn"
            [vim.diagnostic.severity.INFO]: "DiagnosticVirtualTextInfo"
            [vim.diagnostic.severity.HINT]: "DiagnosticVirtualTextHint"
        get_indentation_for_line = (bufnr, lnum) ->
            lines = vim.api.nvim_buf_get_lines bufnr, lnum, lnum + 1, false
            line = lines[1]
            out = ""
            for i = 1, #line
                switch line\sub i, i
                    when ' '
                        if (i-1) % 4 == 0
                            out ..= vim.g.indent_blankline_char
                            -- out ..= "┊"
                        else
                            out ..= " "
                    when '\t'
                        out ..= "\t"
                    else
                        break
            out
        vim.diagnostic.handlers.virtual_lines =
            show: (namespace, bufnr, diagnostics, opts) ->
                vim.validate
                    namespace: {namespace, 'n'}
                    bufnr: {bufnr, 'n'}
                    diagnostics: {diagnostics, vim.tbl_islist, "a list of diagnostics"}
                    opts: {opts, 't', true}

                ns = vim.diagnostic.get_namespace namespace
                ns.user_data.virt_lines_ns = vim.api.nvim_create_namespace "" if not ns.user_data.virt_lines_ns
                virt_lines_ns = ns.user_data.virt_lines_ns

                vim.api.nvim_buf_clear_namespace bufnr, virt_lines_ns, 0, -1

                prefix = "^"

                for id, diagnostic in ipairs diagnostics
                    virt_lines = {}
                    lprefix = prefix
                    indentation = get_indentation_for_line bufnr, diagnostic.lnum
                    for diag_line in diagnostic.message\gmatch("([^\n]+)")
                        table.insert virt_lines, {
                            {
                                indentation,
                                "VirtualIndentBlanklineChar",
                            },
                            {
                                lprefix .. " " .. diag_line,
                                highlight_groups[diagnostic.severity],
                            },
                        }
                        lprefix = string.rep(" ", #prefix)

                    vim.api.nvim_buf_set_extmark bufnr, virt_lines_ns, diagnostic.lnum, 0, :id, :virt_lines
            hide: (namespace, bufnr) ->
                ns = vim.diagnostic.get_namespace namespace
                vim.api.nvim_buf_clear_namespace bufnr, ns.user_data.virt_lines_ns, 0, -1 if ns.user_data.virt_lines_ns

    -- treesitter
    (require 'nvim-treesitter.configs').setup
        highlight:
            enable: true
            additional_vim_regex_highlighting: false
        incremental_selection:
            enable: true
            keymaps:
                init_selection: 'g.'
                node_decremental: ','
                node_incremental: '.'
        textsubjects:
            enable: true
            prev_selection: '`'
            keymaps:
                ["<CR>"]: 'textsubjects-smart'
                -- ["o<CR>"]: 'textsubjects-container-outer'
                -- ["i<CR>"]: 'textsubjects-container-inner'
        playground:
            enable: true
        indent:
            enable: false -- currently, this is broken.

    -- aerial
    (require 'aerial').setup
        backends:
            * "treesitter"
            * "markdown"
            * "lsp"
        close_behaviour: "close"
        default_direction: "float"
        float:
            border: "rounded"
            relative: "editor"
            override: (conf) ->
                local stats = vim.api.nvim_list_uis![1]
                local width = stats.width
                local height = stats.height - 1 -- to account for the statusline
                local padding_x = math.floor(0.1 * width)
                local padding_y = math.floor(0.1 * height)

                conf.width = width - 2*padding_x
                conf.height = height - 2*padding_y
                conf.row = padding_y - 1
                conf.col = padding_x - 1
                conf.anchor = "NW"

                conf
        min_width: 60
        filter_kind:
            * "Class"
            * "Constructor"
            * "Enum"
            * "Function"
            * "Interface"
            * "Module"
            * "Method"
            * "Struct"
        nerd_font: false
        -- TODO post_jump_cmd       call beacon
        close_on_select: true
        show_guides: false

    -- Comment.nvim
    (require 'Comment').setup!

    -- pear-tree
    vim.g.pear_tree_repeatable_expand = 0

    global all_peartree_pairs
    all_peartree_pairs =
        basic_pairs: -- parentheses, bracktes, etc.
            ["("]: closer: ")"
            ["["]: closer: "]"
            ["{"]: closer: "}"
        quotes_and_apostrophes: -- quotes, apostrophes, etc.
            ["\""]: closer: "\""
            ["'"]: closer: "'"
            ["`"]: closer: "`"
        math_dolars: -- inline&display math
            ["$"]: closer: "$"
            ["$$"]: closer: "$$"
        texmath: -- TeX Math
            -- -- delimiters
            ["\\\\("]: closer: "\\\\)"
            ["\\\\["]: closer: "\\\\]"
            ["\\\\left("]: closer: "\\\\right)"
            ["\\\\left["]: closer: "\\\\right]"
            ["\\\\{"]: closer: "\\\\}"
            ["\\\\left\\\\{"]: closer: "\\\\right\\\\}"
            ["\\\\lceil"]: closer: "\\\\rceil"
            ["\\\\left\\\\lceil"]: closer: "\\\\right\\\\rceil"
            ["\\\\lfloor"]: closer: "\\\\rfloor"
            ["\\\\left\\\\lfloor"]: closer: "\\\\right\\\\rfloor"
            ["\\\\lvert"]: closer: "\\\\rvert"
            ["\\\\left\\\\lvert"]: closer: "\\\\right\\\\rvert"
            ["\\\\lVert"]: closer: "\\\\rVert"
            ["\\\\left\\\\lVert"]: closer: "\\\\right\\\\rVert"
            -- -- multi-args
            ["\\\\frac"]: closer: "{}{}"
            ["\\\\inn"]: closer: "{}{}"
            ["\\\\diff"]: closer: "{}{}"
            ["\\\\pdiff"]: closer: "{}{}"
            ["\\\\sqrt["]: closer: "]{}"
            -- -- LaTeX environments
            ["\\\\begin{*}"]: closer: "\\\\end{*}", until: "}"
        xml: -- XML tags
            ["<!--"]: closer: "-->"
            ["<*>"]: closer: "</*>", until: "\\W"
        markdown: -- Markdown formatting
            ["\\*"]: closer: "\\*"
            ["\\*\\*"]: closer: "\\*\\*"
            ["```"]: closer: "```"
            [":::"]: closer: ":::"
        templates: -- c++ templates / rust type variables
            ["<"]: closer: ">", not_at: {"\\W", "^"}

    global pairs_per_filetype, set_pairs_for_filetype
    pairs_per_filetype =
        xml:        {'xml'}
        html:       {'xml'}
        tex:        {'basic_pairs', 'math_dolars', 'texmath'}
        markdown:   {'basic_pairs', 'math_dolars', 'markdown', 'xml'}
        python:     {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        rust:       {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        cpp:        {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        python:     {'basic_pairs', 'quotes_and_apostrophes'}
        -- TODO: javascript
        -- TODO: haskell
        -- TODO: lua
    set_pairs_for_filetype = (filetype) ->
        outpairs = {}
        pair_names_for_filetype = pairs_per_filetype[filetype]
        if pair_names_for_filetype == nil
            outpairs = vim.g.pear_tree_pairs
        else
            for _, subpairs_name in ipairs pair_names_for_filetype
                subpairs = all_peartree_pairs[subpairs_name]
                for k, v in pairs subpairs
                    outpairs[k] = v
        vim.b.pear_tree_pairs = outpairs

    vim.cmd [[autocmd FileType * lua set_pairs_for_filetype(vim.o.filetype)]]

    vim.g.pear_tree_pairs = basic_pairs

    -- vim-table-mode
    vim.g.table_mode_map_prefix = '<Leader><Bar>'
    vim.g.table_mode_toggle_map = '<Bar>'

    -- python-syntax
    vim.g.python_version_2                          = false
    vim.g.python_highlight_builtins                 = true
    vim.g.python_highlight_builtin_objs             = true
    vim.g.python_highlight_builtin_types            = true
    vim.g.python_highlight_builtin_funcs            = true
    vim.g.python_highlight_builtin_funcs_kwarg      = false
    vim.g.python_highlight_exceptions               = true
    vim.g.python_highlight_string_formatting        = true
    vim.g.python_highlight_string_format            = true
    vim.g.python_highlight_string_templates         = true
    vim.g.python_highlight_indent_errors            = false
    vim.g.python_highlight_space_errors             = false
    vim.g.python_highlight_doctests                 = true
    vim.g.python_highlight_func_calls               = false
    vim.g.python_highlight_class_vars               = true
    vim.g.python_highlight_operators                = true
    vim.g.python_highlight_file_headers_as_comments = true

    -- vim-cpp-modern
    vim.g.cpp_no_function_highlight        = false
    vim.g.cpp_named_requirements_highlight = true

    -- vim-markdown
    vim.g.markdown_enable_insert_mode_leader_mappings = false

    -- headlines.nvim
    (require 'headlines').setup!

    -- moonscript-vim
    -- the official YueScript syntax is too slow for me, so I'll use MoonScript syntax for YueScript
    --   (they are similar enough, I think it'll be fine).
    vim.cmd [[autocmd BufNewFile,BufRead *.yue setf moon]]

-- Lots of Vim options
do
    -- Set the regex engine
    vim.o.regexpengine = 1

    --- Enable the mouse
    vim.o.mouse = 'a' -- enable all mouse features

    --- Setup statusbar
    vim.o.showmode = false -- don't show the current mode below the statusbar
    vim.o.laststatus = 3 -- use a global statusline
    -- vim.o.statusline = [[%h%w%q%f %r %m (%L lines) @ %l:%c (%p%%)%=%y LSP]] -- set the statusline to a horizontal separator
    vim.o.ruler = false -- remove the ruler

    --- Hide tabbar
    vim.o.showtabline = 1 -- never show the tabline

    --- Setup :grep
    vim.o.grepprg = [[rg --vimgrep --hidden --glob '!.git']]

    --- Setup line wrap
    vim.o.wrap = false -- wrap lines
    vim.o.linebreak = true -- don't break words on wrap
    vim.o.breakindent = true -- indent wrapped lines
    vim.o.showbreak = "… " -- prefix for wrapped lines

    --- Set "start of line" mode
    vim.o.startofline = true

    --- Set case sensitiveness of the search
    vim.o.ignorecase = true -- by default, case insensitive
    vim.o.smartcase = true -- but if there are capital letters, then case sensitive

    --- Setup the foldcolumn
    vim.o.foldcolumn = 'auto:5' -- automatically manage foldcolumn width

    --- Show the signcolumn
    vim.o.signcolumn = 'auto:1-3' -- automatically resize signcolumn to show at most 3 signs, and at least 1 sign

    --- Show line numbers
    vim.o.number = true -- show line numbers
    vim.o.numberwidth = 1 -- use the least amount of space for the line numbers

    --- Setup folding
    vim.o.foldenable = false -- disable folding
    vim.o.foldminlines = 1 -- require at least 10 lines of content to create a fold
    vim.o.foldnestmax = 5 -- set maximum amount of fold nesting

    --- Use 4 spaces instead of tabs
    vim.o.expandtab = true -- expand tabs
    vim.o.shiftwidth = 4   -- how many sapces to use for >> and <<
    vim.o.softtabstop = 4  -- how many sapces to use for tab

    --- Keep indentation structure
    vim.o.autoindent = true -- use same indentation level for the neighbouring lines
    vim.o.cinoptions = [[L0,N-s,E-s,(0,mN,j1,J1,P1]] -- setup better C/C++ autoindent

    --- Highlight past the textwidth
    vim.o.colorcolumn = '+1' -- highlight the column after the one specified in 'textwidth'

    -- Highlight the current line
    vim.o.cursorline = true -- show the cursorline

    --- Set the updatetime
    vim.o.updatetime = 500 -- how much time between updates, in ms

    --- Remove the bell sound
    vim.o.belloff = 'all' -- disable the bell everywhere

    --- Fix backspace
    vim.o.backspace = "2" -- when in insert mode, backspace will remove indentation and newlines

    --- Open new vertical splits to the right and horizontal splits below
    vim.o.splitright = true -- open new vertical splits to the right
    vim.o.splitbelow = true -- open new horizontal splits below

    --- Setup undo persistence
    vim.o.undofile = true -- save undos to an undo file

    --- Allow hidden buffers
    vim.o.hidden = true -- hide buffers when leaving them, instead of deleting them

    --- Setup views
    vim.o.viewoptions = 'cursor' -- save only the cursor position in a view

    --- Highlight search results
    vim.o.hlsearch = true -- highlight search results

    --- Setup search wrapping
    vim.o.wrapscan = false -- disable search wrapping

    --- Preview search/substitute pattern matches
    vim.o.incsearch = true -- live preview search results
    vim.o.inccommand = 'nosplit' -- live preview command (:s, :g, etc.) results

    --- Show possible Ex command completions above
    vim.o.wildmenu = true -- show completion menu in Ex commands

    --- Setup conceal
    vim.o.concealcursor = '' -- don't conceal the current line in any mode
    vim.o.conceallevel = 2 -- conceal everything, hiding concealed text completely

    --- Show trailing whitespace and tabs
    vim.o.list = true -- show listchars
    vim.o.listchars = [[tab:--,trail:┈]] -- highlight tabs and trailing whitespace

    -- Remove `~` sign from filler lines
    vim.o.fillchars = [[eob: ,stl: ,stlnc: ]]

    --- Setup autocompletion in a way that is better
    vim.o.completeopt = 'menuone,noinsert,noselect' -- menuone: show a menu even if there's only one match
                                                    -- noinsert: only insert when we select
                                                    -- noselect: no automatic selection
    vim.o.complete = '.,i,d' -- look for completions in the current buffer (.) and in the included files (i,d)

    --- Setup verbosity
    vim.o.shortmess = [[filnxtToOFcI]] -- don't show messages regarding completion

    --- Always keep 2 lines around the cursor
    vim.o.scrolloff = 4 -- keep 2 lines above&below the cursor at all times

    --- Setup sessions
    vim.o.sessionoptions = [[blank,buffers,curdir,help,tabpages,winsize,tabpages,globals]]

    --- Setup spellcheck
    vim.o.spelllang = 'en_us,pt_br'

    --- Accelerate Esc presses
    vim.o.ttimeout = true -- enable timeout
    vim.o.ttimeoutlen = 50 -- timeout for keycodes
    vim.o.timeoutlen = 500 -- timeout for mappings

    --- Enable truecolors
    vim.o.termguicolors = true -- use trucolor in a terminal (i.e., use gui colors in a terminal)

    --- Setup terminal colors
    vim.g.terminal_color_0 = "#1d1f21"
    vim.g.terminal_color_1 = "#cc6666"
    vim.g.terminal_color_2 = "#b5bd68"
    vim.g.terminal_color_3 = "#f0c674"
    vim.g.terminal_color_4 = "#81a2be"
    vim.g.terminal_color_5 = "#b294bb"
    vim.g.terminal_color_6 = "#8abeb7"
    vim.g.terminal_color_7 = "#c5c8c6"
    vim.g.terminal_color_8 = "#666666"
    vim.g.terminal_color_9 = "#d54e53"
    vim.g.terminal_color_10 = "#b9ca4a"
    vim.g.terminal_color_11 = "#e7c547"
    vim.g.terminal_color_12 = "#7aa6da"
    vim.g.terminal_color_13 = "#c397d8"
    vim.g.terminal_color_14 = "#70c0b1"
    vim.g.terminal_color_15 = "#eaeaea"

-- Apply my color scheme
vim.cmd 'colorscheme csillag'

-- Neovide (GUI) options
if vim.fn.exists('neovide')
    -- We're in Neovide

    -- vim.g.neovide_transparency = 0.75

    global set_font, gui_default_font_size, gui_font_size
    global increase_font_size, decrease_font_size, reset_font_size
    gui_default_font_size = 8
    gui_font_size = gui_default_font_size

    set_font = ->
        vim.o.guifont = 'FantasqueSansMono Nerd Font:h' .. gui_font_size
    increase_font_size = ->
        gui_font_size = math.min(gui_font_size + 1, 60)
        set_font!
    decrease_font_size = ->
        gui_font_size = math.max(gui_font_size - 1, 4)
        set_font!
    reset_font_size = ->
        gui_font_size = gui_default_font_size
        set_font!

    set_font!

-- Remappings
do
    import nnoremap, vnoremap, onoremap, tnoremap, nmap, vmap, map from require 'vimp'

    -- Abbreviate :w to :up
    vim.cmd [[cnoreabbrev w up]]

-- Autocommands
do
    import map_command from require 'vimp'

    -- Automatically compile config.yue into config.lua
    map_command 'CompileInit', ->
        vim.cmd 'cexpr system("yue ~/.config/nvim/config.yue")'
        vim.cmd 'silent !nvim -u ~/.config/nvim/init.lua -Es +PackerCompile'
    vim.cmd "autocmd BufWritePost #{vim.fn.expand('~/.config/nvim/config.yue')} CompileInit"

    -- AutoView
    -- vim.cmd [[
    --     augroup autoview
    --         autocmd!
    --         autocmd BufWinLeave,VimLeave,BufWritePost * if expand("%") != "" | silent! mkview | endif
    --         autocmd BufWinEnter,BufReadPost * if expand("%") != "" | silent! loadview | endif
    --     augroup END
    -- ]]

    -- SHADA
    vim.cmd [[
        augroup shada
            autocmd!
            autocmd FocusGained * if exists(':rshada') | rshada | endif
            autocmd FocusLost   * if exists(':wshada') | wshada | endif
        augroup END
    ]]

    -- -- SpellCheck
    -- vim.cmd [[
    --     augroup spellcheck
    --         autocmd!
    --         autocmd FileType markdown  set spell
    --         autocmd FileType tex       set spell
    --         autocmd FileType html      set spell
    --         autocmd FileType gitcommit set spell
    --     augroup END
    -- ]]

    -- More filetype detection
    vim.cmd [[
        augroup FtdetectExtra
            autocmd!
            autocmd BufRead,BufNewFile *.lmd setf markdown
            autocmd BufRead,BufNewFile *.pmd setf markdown
        augroup END
    ]]

    -- Autommatic compilation of markup documents
    vim.cmd [[
        augroup autocompile
            autocmd!
            autocmd BufReadPre *.tex               compiler latexrun
            autocmd BufReadPre *.lmd               compiler pan-latex
            autocmd BufReadPre *.pmd               compiler pan-revealjs
            autocmd BufReadPre *.mmd               compiler mermaid
            autocmd BufReadPre *.uml               compiler plantuml
            autocmd BufReadPre *.ly,*.ily          compiler lilypond
            autocmd BufReadPre *.c,*.h,*.cpp,*.hpp compiler tap

            autocmd BufWritePost *.tex,*.lmd,*.pmd,*.mmd,*.uml,*.ly,*.ily AsyncStop | sleep 100m | AsyncRun -program=make
        augroup END
    ]]

    -- Map 'q' in terminal normal mode to close the window
    vim.cmd [[
        augroup termopen
            autocmd!
            autocmd TermOpen * nnoremap <buffer><silent> q :bd<CR>
            autocmd TermOpen * setl nonumber signcolumn=auto:3 nocursorline
            autocmd TermOpen * norm! G
        augroup END
    ]]

    vim.cmd [[
        augroup autoformat
            autocmd!
            autocmd InsertLeave,CursorHold * lua vim.lsp.buf.formatting()
        augroup END
    ]]

    -- Better setup for carbon buffers
    vim.cmd [[
        augroup carbonsetup
            autocmd!
            autocmd FileType carbon set sw=2
        augroup END
    ]]

    -- LSP progress indicator
    spinner = {'⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'}
    global update_lsp_progress
    global lsp_progress_buffers
    global lsp_progress_spinner
    lsp_progress_buffers = {}
    lsp_progress_spinner = 1
    vim.g.lsp_progress_msg = ""
    update_lsp_progress = ->
        bufnr = vim.fn.bufnr!
        if lsp_progress_buffers[bufnr] == nil
            lsp_progress_buffers[bufnr] = {lsp_progress_running: false}

        messages = vim.lsp.util.get_progress_messages!
        last_message = messages[#messages]

        if last_message == nil
            vim.g.lsp_progress_msg = "" if lsp_progress_buffers[bufnr].lsp_progress_running == true
            vim.cmd 'redrawstatus!'
            lsp_progress_buffers[bufnr].lsp_progress_running = false
            return

        has_name = true
        has_percentage = type(last_message.percentage) == 'number'
        has_title = type(last_message.title) == 'string' and #last_message.title > 0
        has_message = type(last_message.message) == 'string' and #last_message.message > 0

        text = ""
        text ..= "#{last_message.message}" if has_message
        text ..= " -- " if has_title and has_message
        text ..= "#{last_message.title}" if has_title
        text ..= " [#{string.format('%3d', last_message.percentage)}%%]" if has_percentage
        -- text ..= " [#{last_message.name}]" if has_name

        lsp_progress_spinner = ((lsp_progress_spinner) % #spinner) + 1
        spinner_now = spinner[lsp_progress_spinner]

        vim.g.lsp_progress_msg = text .. " " .. spinner_now if last_message.progress ~= nil
        vim.cmd 'redrawstatus!'

        lsp_progress_buffers[bufnr].lsp_progress_running = true
    -- vim.cmd 'autocmd User LspProgressUpdate UpdateLSPProgress'
    vim.cmd 'call timer_start(50, { _ -> luaeval("update_lsp_progress()") }, #{repeat: -1})'

-- Functionality
do
    global open_corresponding_pdf
    open_corresponding_pdf = ->
        filename = vim.fn.expand("%:r") .. ".pdf"
        if not vim.fn.filereadable filename
            vim.cmd "echoerr 'No such file: #{filename}'"
            return
        vim.cmd "silent exec '!nohup zathura #{filename} > /dev/null 2>&1 &'"

    global insert_line_above
    insert_line_above = ->
        count = vim.v.count1 - 1
        vim.cmd [[norm! Oa]]
        for _ = 1, count
            vim.cmd [[put _]]
            vim.cmd [[norm! k]]
        vim.cmd [[norm! ^"_D]]
        vim.cmd [[startinsert!]]
    global insert_line_below
    insert_line_below = ->
        count = vim.v.count1 - 1
        vim.cmd [[norm! oa]]
        for _ = 1, count
            vim.cmd [[put! _]]
            vim.cmd [[norm! j]]
        vim.cmd [[norm! ^"_D]]
        vim.cmd [[startinsert!]]

-- Mappings
do
    import applyKeymaps from require 'nest'

    EXPR_PREFIX = '<expr>'
    RECURSIVE_PREFIX = '<rec>'
    VISUAL_PREFIX = '<visual>'
    INSERT_PREFIX = '<insert>'
    TERMINAL_PREFIX = '<terminal>'
    myKeymaps = (maps) ->
        out = {}
        for k, v in pairs maps
            local mode
            if k\sub(1, #VISUAL_PREFIX) == VISUAL_PREFIX
                k = k\sub(#VISUAL_PREFIX+1, #k)
                mode = 'v'
            elseif k\sub(1, #INSERT_PREFIX) == INSERT_PREFIX
                k = k\sub(#INSERT_PREFIX+1, #k)
                mode = 'i'
            elseif k\sub(1, #TERMINAL_PREFIX) == INSERT_PREFIX
                k = k\sub(#TERMINAL_PREFIX+1, #k)
                mode = 't'
            else
                mode = 'n'

            local expr
            if k\sub(1, #EXPR_PREFIX) == EXPR_PREFIX
                k = k\sub(#EXPR_PREFIX+1, #k)
                expr = true
            else
                expr = fase

            local noremap
            if k\sub(1, #RECURSIVE_PREFIX) == RECURSIVE_PREFIX
                k = k\sub(#RECURSIVE_PREFIX+1, #k)
                noremap = false
            else
                noremap = true

            if type(v) == 'table'
                v = myKeymaps v

            out[#out+1] =
                * k
                * v
                :mode
                options:
                    :expr
                    :noremap
        out

    vimcmd = (cmd) -> ':' .. cmd .. '<CR>'
    luacmd = (cmd) -> '<cmd>lua ' .. cmd .. '<CR>'
    plug = (op) -> '<Plug>(' .. op .. ')'
    addspecs = (op) -> op .. ':lua maybe_show_specs()<CR>'
    fzflua = (provider) -> vimcmd 'FzfLua ' .. provider

    applyKeymaps myKeymaps
        '<Leader>':
            -- FZF
            'e': fzflua 'files'
            'ge': fzflua 'git_files'
            'gg': fzflua 'git_status'
            'b': fzflua 'buffers'
            'H': fzflua 'help_tags'
            'F': fzflua 'filetypes'
            'f': fzflua 'live_grep_resume'

            -- carbon
            'E': vimcmd 'Carbon'

            -- code runner
            'R': ->
                local f = io.open "run.sh", "rb"
                local command
                if f then
                    f\close!

                    command = "./run.sh"
                else
                    print "Using default run command for filetype '" .. vim.o.filetype .. "'"
                    switch vim.o.filetype
                        when "python"
                            command = "python %"
                        when "rust"
                            command = "cargo run"
                        when "lua"
                            command = "lua %"
                        when "nail"
                            command = "nail run %"
                        when "sh"
                            command = "bash %"
                        else
                            print "No default run command for filetype '" .. vim.o.filetype .. "'; please add to config.yue or create a run.sh"
                            return

                vim.cmd "split term://" .. command

            -- magma-nvim
            'r':
                '<expr>': 'nvim_exec("MagmaEvaluateOperator", v:true)'
                '<visual>': ':<C-u>MagmaEvaluateVisual<CR>'
                'r': vimcmd 'MagmaEvaluateLine'
                'c': vimcmd 'MagmaReevaluateCell'
                'd': vimcmd 'MagmaDelete'
                'o': vimcmd 'MagmaShowOutput'
                'n': vimcmd 'MagmaInit'

            -- vim-test
            't':
                't': vimcmd 'TestNearest'
                'f': vimcmd 'TestFile'
                'l': vimcmd 'TestLast'

            'G': vimcmd 'G' -- open fugitive

            ';': luacmd 'specs.show_specs()' -- highlight the cursor

            -- 'S': vimcmd 'set spell!' -- toggle spell
            -- 's': ':set spelllang=' -- set spell language

            'p': luacmd 'open_corresponding_pdf()' -- open corresponding PDF for the current [markup file]

            '.': vimcmd 'nohl' -- :nohl

            'o': -- open windows
                'c': vimcmd 'copen' -- open quickfix window
                't': vimcmd 'Trouble' -- open trouble window
            'q': -- close windows
                'c': vimcmd 'cclose' -- close quickfix window
                't': vimcmd 'TroubleClose' -- close trouble window

            'n': vimcmd 'set number!' -- toggle line numbers

            'T': -> -- open taskell
                local buffer = vim.api.nvim_create_buf false, true
                local stats = vim.api.nvim_list_uis![1]
                local width = stats.width
                local height = stats.height - 1 -- to account for the statusline
                local padding_x = math.floor(0.1 * width)
                local padding_y = math.floor(0.1 * height)
                vim.api.nvim_open_win buffer, true
                    relative: "editor"
                    width: width - 2*padding_x
                    height: height - 2*padding_y
                    row: padding_y - 1
                    col: padding_x - 1
                    anchor: "NW"
                    border: "rounded"
                vim.fn.termopen "taskell"
                    on_exit: -> vim.fn.feedkeys "q"
                vim.cmd "startinsert"

        -- :cn and :cp
        '[q': vimcmd 'cp'
        ']q': vimcmd 'cn'

        -- spell suggest
        -- 'z=': fzflua 'spell_suggest'

        -- substitute
        '<C-s>':
            '<rec>':      plug 'SubversiveSubstitute'
            '<rec><C-s>': plug 'SubversiveSubstituteLine'

        -- dial.nvim
        '<rec><C-a>':         plug 'dial-increment'
        '<rec><C-x>':         plug 'dial-decrement'
        '<rec><visual><C-a>': plug 'dial-increment'
        '<rec><visual><C-x>': plug 'dial-decrement'
        '<rec>g<C-a>':        plug 'dial-increment-additional'
        '<rec>g<C-x>':        plug 'dial-decrement-additional'

        'g':
            -- misc window operations
            'w': "<C-w>"

            -- text alignment
            'a':
                '=': vimcmd [[Tabularize /=]]
                ':': vimcmd [[Tabularize /:\zs]]
                ' ': vimcmd [[Tabularize /,\zs]]

        'z':
            -- open aerial view
            'g': vimcmd 'AerialOpen'

        -- specs & asterisk
        'n': addspecs 'n'
        'N': addspecs 'N'
        '<rec>*': addspecs plug 'asterisk-*'
        '<rec>#': addspecs plug 'asterisk-#'
        '<rec>g*': addspecs plug 'asterisk-g*'
        '<rec>g#': addspecs plug 'asterisk-g#'
        '<rec>z*': addspecs plug 'asterisk-z*'
        '<rec>z#': addspecs plug 'asterisk-z#'
        '<rec>gz*': addspecs plug 'asterisk-gz*'
        '<rec>gz#': addspecs plug 'asterisk-gz#'

        -- swap "go to mark" maps
        "'": "`"
        "`": "'"

        -- Make Y work like D
        'Y': 'y$'

        -- Map Q to quit if everything is saved
        'Q': vimcmd "qa"

        -- Change S to behave kinda like X
        'S': '"_Xi<CR><Esc>l'

        -- Change s to ys (normal) / S (visual)
        '<rec>s': 'ys'
        '<visual><rec>s': 'S'

        -- Change o/O to not insert text at multiple lines, when used with a count
        'O': luacmd "insert_line_above()"
        'o': luacmd "insert_line_below()"

        -- Disable suspend
        '<C-z>': '<nop>'

        -- Map <C-6> to <C-^> (for GUIs)
        '<C-6>': '<C-^>'

        '<C-+>': increase_font_size
        '<C-=>': increase_font_size
        '<C-->': decrease_font_size
        '<C-0>': reset_font_size
