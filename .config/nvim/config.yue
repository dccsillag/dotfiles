-- Plugins

vim.cmd 'packadd packer.nvim'

plugins = ->
    plug = (name, table) ->
        table or= {}
        table[1] = name
        use table

    plugown = (name, table) ->
        maybepath = "~/code/#{name}"
        local resolved_name
        if (os.execute "[ -d #{maybepath} ]")
            resolved_name = maybepath
        else
            resolved_name = "dccsillag/#{name}"
        plug resolved_name, table

    -- Core
    plug 'wbthomason/packer.nvim' -- plugin manager
    plug 'svermeulen/vimpeccable', config: -> -- convenience Lua functions for config
        import 'vimp'

        vimp.always_override = true
    plug 'LionC/nest.nvim' -- easy API for creating mappings
    plug 'nvim-lua/plenary.nvim' -- convenience Lua functions for plugins

    -- Interface
    plug 'junegunn/fzf', run: './install --bin' -- fuzzy finder
    plug 'ibhagwan/fzf-lua', requires: {'vijaymarupudi/nvim-fzf'}, config: -> -- fuzzy finder from neovim
        import 'fzf-lua' as fzf_lua

        fzf_lua.setup
            fzf_opts:
                "--layout": 'default'
            keymap:
                builtin:
                    "<C-l>": "toggle-preview"
                fzf:
                    "ctrl-l": "toggle-preview"
            winopts:
                preview:
                    hidden: 'hidden'
            lsp:
                severity: "warning"
                icons:
                    "Error":
                        icon: "E"
                        color: "red"
                    "Warning":
                        icon: "W"
                        color: "yellow"
                    "Information":
                        icon: "I"
                        color: "blue"
                    "Hint":
                        icon: "H"
                        color: "magenta"
    plug 'nvim-telescope/telescope.nvim', requires: {'nvim-lua/plenary.nvim'}
    plug 'machakann/vim-highlightedyank' -- briefly highlight yanked region
    plug 'edluffy/specs.nvim', config: -> -- highlight cursor jumps
        global specs, should_show_specs, maybe_show_specs
        import 'specs'

        -- should_show_specs = vim.fn.exists('neovide') == 0
        should_show_specs = false

        specs.setup
            show_jumps: should_show_specs
            min_jump: 2
            popup:
                delay_ms: 0
                inc_ms: 8
                blend: 60
                width: 25
                winhl: 'Specs'
                fader: specs.empty_fader
                resizer: specs.shrink_resizer
            ignore_filetypes:
                * "dashboard"
            ignore_buftypes:
                "nofile": true

        maybe_show_specs = -> specs.show_specs! if should_show_specs
    plug 'folke/zen-mode.nvim', config: -> -- toggleable zen mode for editing
        import 'zen-mode' as zen_mode
        zen_mode.setup!
    plug 'lewis6991/gitsigns.nvim', config: -> -- show git diff in the signcolumn
        import 'gitsigns'
        gitsigns.setup
            keymaps:
                noremap: true
                ['n [c']: { expr: true, "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'" }
                ['n ]c']: { expr: true, "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'" }

                ["n <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk()<CR>'
                ["v <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
                ["n <leader>gu"]: '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>'
                ["n <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk()<CR>'
                ["v <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
                -- ["n <leader>gX"]: '<cmd>lua require"gitsigns".reset_buffer()<CR>'
                ["n <leader>gd"]: '<cmd>lua require"gitsigns".preview_hunk()<CR>'
                ["n <leader>gb"]: '<cmd>lua require"gitsigns".blame_line(true)<CR>'

                ["o ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
                ["x ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
    plug 'junegunn/limelight.vim', config: -> -- a spotlight for code, good for presenting bit-by-bit
        vim.g.limelight_conceal_ctermfg = 242
        vim.g.limelight_conceal_guifg = '#606060'
    plug 'junegunn/goyo.vim' -- make things pretty, for more elegant presentations
    plug 'lukas-reineke/indent-blankline.nvim', config: -> -- indent guides
        vim.g.indent_blankline_char = '⎜'
        vim.g.indent_blankline_show_trailing_blankline_indent = false
        vim.g.indent_blankline_buftype_exclude =
            * 'terminal'
        vim.g.indent_blankline_filetype_exclude =
            * 'dashboard'
            * 'packer'
            * 'help'
            * 'Outline'
    -- plug 'romgrk/nvim-treesitter-context', config: -> -- show code context on top of the buffer
    --     (require 'treesitter-context').setup
    --         enable: true
    --         throttle: true
    plug 'andymass/vim-matchup' -- better delimiter matching
    -- plug 'wellle/context.vim', config: -> -- show code context on top of the buffer
    --     vim.g.context_nvim_no_redraw = 1
    plug 'kshenoy/vim-signature' -- show marks in the sign column
    plug 'rcarriga/nvim-notify', config: -> -- show notifications
        vim.notify = require 'notify'
        vim.notify.setup
            stages: "slide"
            timeout: 1000
    plug 'dstein64/vim-startuptime' -- profile startup time neatly

    -- Behaviour
    plug 'tpope/vim-repeat' -- better `.` key
    plug 'chaoren/vim-wordmotion', config: -> -- improve the `w` key and similar
        vim.g.wordmotion_spaces = ''
    plug 'haya14busa/vim-asterisk' -- improve `*` and `#`
    plug 'embear/vim-localvimrc', config: -> -- for using local [e.g., project-specific] vimrcs
        vim.g.localvimrc_persistent = 1
        vim.g.localvimrc_persistence_file = vim.fn.expand "~/.local/misc/localvimrc_persistent"
    plug 'vim-scripts/let-modeline.vim' -- have a specific modeline for configuring plugins
    plug 'lambdalisue/suda.vim', config: -> -- for editting files which require root permission
        vim.g.suda_smart_edit = 1
    plug 'aymericbeaumet/vim-symlink' -- edit the real file, not symlinks

    -- Peripherals
    plug 'tpope/vim-eunuch' -- add nice commands for shell commands
    plug 'skywind3000/asyncrun.vim' -- for running stuff in the background, async
    plug 'itspriddle/vim-shellcheck' -- run shellcheck from Vim as a :compiler
    plug 'tpope/vim-fugitive', config: -> -- use git from vim
        import map_command, nnoremap from require 'vimp'

        map_command 'Fugitive', ->
            vim.cmd ":G"
            vim.cmd "only"
            nnoremap {"buffer"}, "gq", ":qa!<CR>"
    plug 'christoomey/vim-conflicted' -- easily solve git merge conflicts
    plug 'junegunn/gv.vim' -- git commit browser
    plugown 'magma-nvim', run: ':UpdateRemotePlugins', config: -> -- interact with Jupyter
        vim.g.magma_automatically_open_output = false
        vim.g.magma_show_mimetype_debug = true
        vim.g.magma_image_provider = "ueberzug"
    plug 'vim-test/vim-test', config: -> -- run tests from NeoVim
        vim.g['test#strategy'] = 'neovim'
        vim.g['test#neovim#start_normal'] = 1
        vim.g['test#basic#start_normal'] = 1

    -- Completion
    plug 'hrsh7th/nvim-cmp', requires: {"hrsh7th/vim-vsnip"}, config: -> -- completion framework for NeoVim
        import 'cmp'
        cmp.setup
            -- completion:
            --     autocomplete: false
            mapping:
                "<C-c>": cmp.mapping.complete!
                "<C-l>": cmp.mapping.confirm select: true
                "<C-j>": cmp.mapping.select_next_item behaviour: cmp.SelectBehavior.Select
                "<C-k>": cmp.mapping.select_prev_item behaviour: cmp.SelectBehavior.Select
                "<C-h>": cmp.mapping.close!
            sources:
                * name: "crates"
                * name: "nvim_lsp"
                * name: "path"
                -- * name: "buffer"
            snippet:
                expand: (args) -> vim.fn["vsnip#anonymous"] args.body
    plug 'hrsh7th/cmp-nvim-lsp'
    -- plug 'hrsh7th/cmp-buffer'
    plug 'hrsh7th/cmp-path'
    plug 'Saecki/crates.nvim', config: ->
        (require 'crates').setup!

    -- LSP / TreeSitter / Formatting
    plug 'nvim-lua/lsp_extensions.nvim' -- extra easy configurations for LSP
    plug 'neovim/nvim-lspconfig', config: -> -- easily configure LSP
        import 'lspconfig' as nvim_lsp

        capabilities = (require 'cmp_nvim_lsp').update_capabilities vim.lsp.protocol.make_client_capabilities!
        capabilities.window.workDoneProgress = true

        on_attach = (client) ->
            vim.notify "Ready.", "info", title: "LSP", timeout: 500

            import nnoremap, vnoremap from require 'vimp'

            nnoremap {'silent'}, '<C-k>',      -> vim.lsp.diagnostic.show_line_diagnostics()
            nnoremap {'silent'}, '<C-]>',      -> vim.lsp.buf.definition()
            nnoremap {'silent'}, 'K',          -> vim.lsp.buf.hover()
            nnoremap {'silent'}, 'gd',         -> vim.lsp.buf.definition()
            nnoremap {'silent'}, 'gD',         ":FzfLua lsp_definitions<CR>"
            nnoremap {'silent'}, 'gr',         ":FzfLua lsp_references<CR>"
            nnoremap {'silent'}, 'gR',         -> vim.lsp.buf.references()
            nnoremap {'silent'}, 'gq',         -> vim.lsp.buf.formatting()
            nnoremap {'silent'}, '<Leader>lg', ":FzfLua lsp_live_workspace_symbols<CR>"
            nnoremap {'silent'}, '<Leader>lG', ":FzfLua lsp_document_symbols<CR>"
            nnoremap {'silent'}, '<Leader>li', ":FzfLua lsp_implementations<CR>"
            nnoremap {'silent'}, '<Leader>ld', ":FzfLua lsp_workspace_diagnostics<CR>"
            nnoremap {'silent'}, '<Leader>lD', ":FzfLua lsp_document_diagnostics<CR>"
            nnoremap {'silent'}, '<Leader>lr', -> vim.lsp.buf.rename()
            nnoremap {'silent'}, '<Leader>a',  -> vim.lsp.buf.code_action()
            vnoremap {'silent'}, '<Leader>a',  -> vim.lsp.buf.range_code_action()

            nnoremap {'silent'}, '[g', -> vim.lsp.diagnostic.goto_prev()
            nnoremap {'silent'}, ']g', -> vim.lsp.diagnostic.goto_next()

        -- Configure LSPs
        nvim_lsp.rust_analyzer.setup
            :capabilities
            :on_attach
            settings:
                ["rust-analyzer"]:
                    checkOnSave:
                        extraArgs:
                            * "--target-dir"
                            * ".target-rust_analyzer_check"
                    cargo:
                        loadOutDirsFromCheck: true
                    procMacro:
                        enable: true
                    diagnostics:
                        enable: false
        nvim_lsp.clangd.setup
            :capabilities
            :on_attach
            cmd:
                * "clangd"
                * "--background-index"
                * "--clang-tidy"
        nvim_lsp.sumneko_lua.setup
            :capabilities
            :on_attach
            cmd:
                * "lua-language-server"
                * "-E"
                * "/usr/share/lua-language-server/main.lua"
        nvim_lsp.pyright.setup
            :on_attach
            :capabilities
        nvim_lsp.hls.setup
            :on_attach
            :capabilities
        nvim_lsp.texlab.setup
            :on_attach
            :capabilities
        nvim_lsp.vimls.setup
            :on_attach
            :capabilities

        vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with vim.lsp.diagnostic.on_publish_diagnostics,
                virtual_text: true
                underline: true
                signs: false
                update_in_insert: true
    plug 'nvim-treesitter/nvim-treesitter', 'run': ':TSUpdate', config: -> -- easy treesitter config
        import 'nvim-treesitter.configs' as nvim_treesitter
        nvim_treesitter.setup
            highlight:
                enable: true
                additional_vim_regex_highlighting: false
            incremental_selection:
                enable: true
                keymaps:
                    init_selection: 'g.'
                    node_decremental: ','
                    node_incremental: '.'
            indent:
                enable: false -- currently, this is broken.
    plug 'simrat39/symbols-outline.nvim', config: -> -- show code outline
        symbols = {}
        symbols_to_add =
            File: 'FILE'
            Module: 'MOD'
            Namespace: 'NMSP'
            Package: 'PKG'
            Enum: 'ENUM'
            EnumMember: '•'
            Class: 'CLS'
            Method: '::FUNC'
            Property: '::PROP'
            Field: '::VAR'
            Constructor: '::NEW'
            Interface: 'TRAIT'
            Function: 'FUNC'
            Variable: 'VAR'
            Constant: 'CONST'
            String: 'STR'
            Number: 'NUM'
            Boolean: 'BOOL'
            Array: 'ARR'
            Object: 'OBJ'
            Key: 'KEY'
            Null: 'NULL'
            Struct: 'DATA'
            Event: 'EVNT'
            Operator: 'OP'
            TypeParameter: 'TYPE'
        for symbol, custom_name in pairs symbols_to_add
            symbols[symbol] =
                icon: if custom_name == '' then string.upper symbol else custom_name
                -- icon: '|' .. (if custom_name == '' then string.upper symbol else custom_name) .. '|'
                hl: 'SymbolIcon'
        vim.g.symbols_outline =
            highlight_hovered_item: true
            show_guides: false
            auto_preview: false
            position: 'right'
            width: 75
            show_symbol_details: false
            keymaps:
                close:
                    * '<ESC>'
                    * 'q'
                goto_location:
                    * '<CR>'
                focus_location: {}
                hover_symbol:
                    * 'K'
                toggle_preview:
                    * '<C-l>'
                rename_symbol:
                    * 'r'
                code_actions: {}
                show_help: {}
            :symbols

        -- Autoclose:
        vim.cmd [[
            autocmd WinLeave OUTLINE SymbolsOutlineClose
            autocmd FileType Outline setl cul
            autocmd CursorMoved OUTLINE norm! zz0
        ]]

    -- Color Schemes
    plug 'rktjmp/lush.nvim', branch: 'main' -- easily create color schemes for NeoVim
    plug 'joshdick/onedark.vim' -- onedark colorscheme from Atom
    plug 'pbrisbin/vim-colors-off' -- a plain colorscheme that pretty much disables highlighting
    plug 'arcticicestudio/nord-vim' -- nord colorscheme
    plug 'arzg/vim-substrata' -- a cold, dark colorscheme for Vim

    -- Editing Help
    plug 'tpope/vim-surround' -- surround text with stuff [parentheses, brackets, and much more]
    plug 'numToStr/Comment.nvim', config: -> -- comment/uncomment code
        import 'Comment'

        Comment.setup!
    plug 'tmsvg/pear-tree', config: -> -- automatic delimiter pair closing
        vim.g.pear_tree_repeatable_expand = 0

        global all_peartree_pairs
        all_peartree_pairs =
            basic_pairs: -- parentheses, bracktes, etc.
                ["("]: closer: ")"
                ["["]: closer: "]"
                ["{"]: closer: "}"
            quotes_and_apostrophes: -- quotes, apostrophes, etc.
                ["\""]: closer: "\""
                ["'"]: closer: "'"
                ["`"]: closer: "`"
            math_dolars: -- inline&display math
                ["$"]: closer: "$"
                ["$$"]: closer: "$$"
            texmath: -- TeX Math
                -- -- delimiters
                ["\\\\("]: closer: "\\\\)"
                ["\\\\["]: closer: "\\\\]"
                ["\\\\left("]: closer: "\\\\right)"
                ["\\\\left["]: closer: "\\\\right]"
                ["\\\\{"]: closer: "\\\\}"
                ["\\\\left\\\\{"]: closer: "\\\\right\\\\}"
                ["\\\\lceil"]: closer: "\\\\rceil"
                ["\\\\left\\\\lceil"]: closer: "\\\\right\\\\rceil"
                ["\\\\lfloor"]: closer: "\\\\rfloor"
                ["\\\\left\\\\lfloor"]: closer: "\\\\right\\\\rfloor"
                ["\\\\lvert"]: closer: "\\\\rvert"
                ["\\\\left\\\\lvert"]: closer: "\\\\right\\\\rvert"
                ["\\\\lVert"]: closer: "\\\\rVert"
                ["\\\\left\\\\lVert"]: closer: "\\\\right\\\\rVert"
                -- -- multi-args
                ["\\\\frac"]: closer: "{}{}"
                ["\\\\inn"]: closer: "{}{}"
                ["\\\\diff"]: closer: "{}{}"
                ["\\\\pdiff"]: closer: "{}{}"
                ["\\\\sqrt["]: closer: "]{}"
                -- -- LaTeX environments
                ["\\\\begin{*}"]: closer: "\\\\end{*}", until: "}"
            xml: -- XML tags
                ["<!--"]: closer: "-->"
                ["<*>"]: closer: "</*>", until: "\\W"
            markdown: -- Markdown formatting
                ["\\*"]: closer: "\\*"
                ["\\*\\*"]: closer: "\\*\\*"
                ["```"]: closer: "```"
                [":::"]: closer: ":::"
            templates: -- c++ templates / rust type variables
                ["<"]: closer: ">", not_at: {"\\W", "^"}

        global pairs_per_filetype, set_pairs_for_filetype
        pairs_per_filetype =
            xml:        {'xml'}
            html:       {'xml'}
            tex:        {'basic_pairs', 'math_dolars', 'texmath'}
            markdown:   {'basic_pairs', 'math_dolars', 'markdown', 'xml'}
            python:     {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
            rust:       {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
            cpp:        {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
            python:     {'basic_pairs', 'quotes_and_apostrophes'}
            -- TODO: javascript
            -- TODO: haskell
            -- TODO: lua
        set_pairs_for_filetype = (filetype) ->
            outpairs = {}
            pair_names_for_filetype = pairs_per_filetype[filetype]
            if pair_names_for_filetype == nil
                outpairs = vim.g.pear_tree_pairs
            else
                for _, subpairs_name in ipairs pair_names_for_filetype
                    subpairs = all_peartree_pairs[subpairs_name]
                    for k, v in pairs subpairs
                        outpairs[k] = v
            vim.b.pear_tree_pairs = outpairs

        vim.cmd [[autocmd FileType * lua set_pairs_for_filetype(vim.o.filetype)]]

        vim.g.pear_tree_pairs = basic_pairs
    plug 'godlygeek/tabular' -- aligns code
    plug 'dhruvasagar/vim-table-mode', config: -> -- painlessly edit tables
        vim.g.table_mode_map_prefix = '<Leader><Bar>'
        vim.g.table_mode_toggle_map = '<Bar>'
    plug 'tommcdo/vim-exchange' -- exchange text around
    plug 'svermeulen/vim-subversive' -- replace text with current yank
    plug 'monaqa/dial.nvim' -- better increment/decrement

    -- Text Objects
    plug 'wellle/targets.vim' -- better text objects
    plug 'michaeljsmith/vim-indent-object' -- text object for indented text
    plug 'kana/vim-textobj-entire' -- text object for the entire buffer
    plug 'kana/vim-textobj-syntax' -- text object for text in the same highlight group
    plug 'kana/vim-textobj-user' -- framework for creating text objects [used by other plugins]

    -- Language Support
    plug 'vim-python/python-syntax', config: -> -- better Python syntax highlight
        vim.g.python_version_2                          = false
        vim.g.python_highlight_builtins                 = true
        vim.g.python_highlight_builtin_objs             = true
        vim.g.python_highlight_builtin_types            = true
        vim.g.python_highlight_builtin_funcs            = true
        vim.g.python_highlight_builtin_funcs_kwarg      = false
        vim.g.python_highlight_exceptions               = true
        vim.g.python_highlight_string_formatting        = true
        vim.g.python_highlight_string_format            = true
        vim.g.python_highlight_string_templates         = true
        vim.g.python_highlight_indent_errors            = false
        vim.g.python_highlight_space_errors             = false
        vim.g.python_highlight_doctests                 = true
        vim.g.python_highlight_func_calls               = false
        vim.g.python_highlight_class_vars               = true
        vim.g.python_highlight_operators                = true
        vim.g.python_highlight_file_headers_as_comments = true
    plug 'petRUShka/vim-sage' -- language support for SageMath
    plug 'Vimjas/vim-python-pep8-indent' -- indent Python code according to PEP8
    plug 'bfrg/vim-cpp-modern', config: -> -- better C++ syntax highlight
        vim.g.cpp_no_function_highlight        = false
        vim.g.cpp_named_requirements_highlight = true
    plug 'gabrielelana/vim-markdown', requires: {'godlygeek/tabular'}, config: -> -- better Markdown support
        vim.g.markdown_enable_insert_mode_leader_mappings = false
    plug 'leafo/moonscript-vim', config: -> -- language support for {Moon,Yue}Script
        -- the official YueScript syntax is too slow for me, so I'll use MoonScript syntax for YueScript
        --   (they are similar enough, I think it'll be fine).
        vim.cmd [[autocmd BufNewFile,BufRead *.yue setf moon]]
    plug 'tomlion/vim-solidity' -- language support for Solidity
    plug 'rubik/vim-dg' -- language support for DogeLang [aka. dg]
    plug 'manicmaniac/coconut.vim' -- language support for Coconut
    plug 'rust-lang/rust.vim' -- better Rust syntax support
    plug 'neovimhaskell/haskell-vim' -- better support for Haskell
    plug 'edwinb/idris2-vim' -- language support for Idris
    plug 'mrk21/yaml-vim' -- better language support for YAML
    plug 'cespare/vim-toml' -- language support for TOML
    plug 'LnL7/vim-nix' -- language support for Nix
    plug 'MaxMEllon/vim-jsx-pretty' -- language support for JSX
    plug 'dart-lang/dart-vim-plugin' -- language support for Dart
    plug 'tikhomirov/vim-glsl' -- language support for GLSL
    plug 'aklt/plantuml-syntax' -- for PlantUML syntax support
    plug 'wlangstroth/vim-racket' -- language support for Racket
    plug 'goerz/jupytext.vim' -- edit Jupyter notebooks in vim
    plug 'pest-parser/pest.vim' -- language support for Pest grammars

import 'packer'
import 'packer.util' as packer_util

packer_config =
    max_jobs: 8
    display:
        open_fn: -> packer_util.float border: 'single'
        working_sym: "•"
        error_sym: "✗"
        done_sym: "✓"
        removed_sym: "-"
        moved_sym: "→"
        header_sym: "━"
packer.startup {plugins, config: packer_config}

-- Neovide (GUI) options
vim.g.neovide_transparency = 0.75
vim.o.guifont = 'FantasqueSansMono Nerd Font:12'

-- Lots of Vim options
do
    -- Set the regex engine
    vim.o.regexpengine = 1

    --- Enable the mouse
    vim.o.mouse = 'a' -- enable all mouse features

    --- Setup statusbar
    vim.o.showmode = false -- don't show the current mode below the statusbar
    vim.o.laststatus = 0 -- only show the statusline when in between two windows
    vim.o.statusline = [[%{repeat('―', nvim_win_get_width(0))}]] -- set the statusline to a horizontal separator
    vim.o.ruler = false -- remove the ruler

    --- Hide tabbar
    vim.o.showtabline = 0 -- never show the tabline

    --- Setup :grep
    vim.o.grepprg = [[grep -R --exclude-dir=.git -n $* . /dev/null]]

    --- Setup line wrap
    vim.o.wrap = false -- wrap lines
    vim.o.linebreak = true -- don't break words on wrap
    vim.o.breakindent = true -- indent wrapped lines
    vim.o.showbreak = "… " -- prefix for wrapped lines

    --- Set "start of line" mode
    vim.o.startofline = true

    --- Set case sensitiveness of the search
    vim.o.ignorecase = true -- by default, case insensitive
    vim.o.smartcase = true -- but if there are capital letters, then case sensitive

    --- Setup the foldcolumn
    vim.o.foldcolumn = 'auto:5' -- automatically manage foldcolumn width

    --- Show the signcolumn
    vim.o.signcolumn = 'auto:3' -- automatically resize signcolumn to show at most 3 signs

    --- Setup folding
    vim.o.foldenable = false -- disable folding
    vim.o.foldminlines = 1 -- require at least 10 lines of content to create a fold
    vim.o.foldnestmax = 5 -- set maximum amount of fold nesting

    --- Use 4 spaces instead of tabs
    vim.o.expandtab = true -- expand tabs
    vim.o.shiftwidth = 4   -- how many sapces to use for >> and <<
    vim.o.softtabstop = 4  -- how many sapces to use for tab

    --- Keep indentation structure
    vim.o.autoindent = true -- use same indentation level for the neighbouring lines
    vim.o.cinoptions = [[L0,N-s,E-s,(0,mN,j1,J1,P1]] -- setup better C/C++ autoindent

    --- Highlight past the textwidth
    vim.o.colorcolumn = '+1' -- highlight the column after the one specified in 'textwidth'

    -- Don't highlight the current line
    vim.o.cursorline = false -- don't show the cursorline

    --- Set the updatetime
    vim.o.updatetime = 250 -- how much time between updates, in ms

    --- Remove the bell sound
    vim.o.belloff = 'all' -- disable the bell everywhere

    --- Fix backspace
    vim.o.backspace = "2" -- when in insert mode, backspace will remove indentation and newlines

    --- Open new vertical splits to the right and horizontal splits below
    vim.o.splitright = true -- open new vertical splits to the right
    vim.o.splitbelow = true -- open new horizontal splits below

    --- Setup undo persistence
    vim.o.undofile = true -- save undos to an undo file

    --- Allow hidden buffers
    vim.o.hidden = true -- hide buffers when leaving them, instead of deleting them

    --- Setup views
    vim.o.viewoptions = 'cursor' -- save only the cursor position in a view

    --- Highlight search results
    vim.o.hlsearch = true -- highlight search results

    --- Setup search wrapping
    vim.o.wrapscan = false -- disable search wrapping

    --- Preview search/substitute pattern matches
    vim.o.incsearch = true -- live preview search results
    vim.o.inccommand = 'nosplit' -- live preview command (:s, :g, etc.) results

    --- Show possible Ex command completions above
    vim.o.wildmenu = true -- show completion menu in Ex commands

    --- Setup conceal
    vim.o.concealcursor = '' -- don't conceal the current line in any mode
    vim.o.conceallevel = 2 -- conceal everything, hiding concealed text completely

    --- Show trailing whitespace and tabs
    vim.o.list = true -- show listchars
    vim.o.listchars = [[tab:--,trail:┈]] -- highlight tabs and trailing whitespace

    -- Remove `~` sign from filler lines
    vim.o.fillchars = [[eob: ]]

    --- Setup autocompletion in a way that is better
    vim.o.completeopt = 'menuone,noinsert,noselect' -- menuone: show a menu even if there's only one match
                                                    -- noinsert: only insert when we select
                                                    -- noselect: no automatic selection
    vim.o.complete = '.,i,d' -- look for completions in the current buffer (.) and in the included files (i,d)

    --- Setup verbosity
    vim.o.shortmess = [[filnxtToOFcI]] -- don't show messages regarding completion

    --- Always keep 2 lines around the cursor
    vim.o.scrolloff = 2 -- keep 2 lines above&below the cursor at all times

    --- Setup sessions
    vim.o.sessionoptions = [[blank,buffers,curdir,help,tabpages,winsize,tabpages,globals]]

    --- Setup spellcheck
    vim.o.spelllang = 'en_us,pt_br'

    --- Accelerate Esc presses
    vim.o.ttimeout = true -- enable timeout
    vim.o.ttimeoutlen = 50 -- timeout for keycodes
    vim.o.timeoutlen = 500 -- timeout for mappings

    --- Enable truecolors
    vim.o.termguicolors = true -- use trucolor in a terminal (i.e., use gui colors in a terminal)

-- Apply my color scheme
vim.cmd 'colorscheme csillag'

-- Remappings
do
    import nnoremap, vnoremap, onoremap, tnoremap, nmap, vmap, map from require 'vimp'

    -- Abbreviate :w to :up
    vim.cmd [[cnoreabbrev w up]]

-- Autocommands
do
    import map_command from require 'vimp'

    -- Automatically compile config.yue into config.lua
    map_command 'CompileInit', ->
        vim.cmd 'cexpr system("yue ~/.config/nvim/config.yue")'
        vim.cmd 'silent !nvim -u ~/.config/nvim/init.lua -Es +PackerCompile'
    vim.cmd "autocmd BufWritePost #{vim.fn.expand('~/.config/nvim/config.yue')} CompileInit"

    -- AutoView
    -- vim.cmd [[
    --     augroup autoview
    --         autocmd!
    --         autocmd BufWinLeave,VimLeave,BufWritePost * if expand("%") != "" | silent! mkview | endif
    --         autocmd BufWinEnter,BufReadPost * if expand("%") != "" | silent! loadview | endif
    --     augroup END
    -- ]]

    -- SHADA
    vim.cmd [[
        augroup shada
            autocmd!
            autocmd FocusGained * if exists(':rshada') | rshada | endif
            autocmd FocusLost   * if exists(':wshada') | wshada | endif
        augroup END
    ]]

    -- -- SpellCheck
    -- vim.cmd [[
    --     augroup spellcheck
    --         autocmd!
    --         autocmd FileType markdown  set spell
    --         autocmd FileType tex       set spell
    --         autocmd FileType html      set spell
    --         autocmd FileType gitcommit set spell
    --     augroup END
    -- ]]

    -- More filetype detection
    vim.cmd [[
        augroup FtdetectExtra
            autocmd!
            autocmd BufRead,BufNewFile *.lmd setf markdown
            autocmd BufRead,BufNewFile *.pmd setf markdown
        augroup END
    ]]

    -- Autommatic compilation of markup documents
    vim.cmd [[
        augroup autocompile
            autocmd!
            autocmd BufReadPre *.tex               compiler latexrun
            autocmd BufReadPre *.lmd               compiler pan-latex
            autocmd BufReadPre *.pmd               compiler pan-revealjs
            autocmd BufReadPre *.mmd               compiler mermaid
            autocmd BufReadPre *.uml               compiler plantuml
            autocmd BufReadPre *.ly,*.ily          compiler lilypond
            autocmd BufReadPre *.c,*.h,*.cpp,*.hpp compiler tap

            autocmd BufWritePost *.tex,*.lmd,*.pmd,*.mmd,*.uml,*.ly,*.ily AsyncStop | sleep 100m | AsyncRun -program=make
        augroup END
    ]]

    -- LSP progress indicator
    spinner = {'⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'}
    global update_lsp_progress
    global lsp_progress_buffers
    global lsp_progress_spinner
    lsp_progress_buffers = {}
    lsp_progress_spinner = 1
    update_lsp_progress = ->
        bufnr = vim.fn.bufnr!
        if lsp_progress_buffers[bufnr] == nil
            lsp_progress_buffers[bufnr] = {lsp_progress_running: false}

        messages = vim.lsp.util.get_progress_messages!
        last_message = messages[#messages]

        if last_message == nil
            vim.api.nvim_echo {{""}}, false, {} if lsp_progress_buffers[bufnr].lsp_progress_running == true
            lsp_progress_buffers[bufnr].lsp_progress_running = false
            return

        has_name = true
        has_percentage = type(last_message.percentage) == 'number'
        has_title = type(last_message.title) == 'string' and #last_message.title > 0
        has_message = type(last_message.message) == 'string' and #last_message.message > 0

        text = ""
        text ..= "[#{last_message.name}] " if has_name
        text ..= "[#{last_message.percentage}%] " if has_percentage
        text ..= "#{last_message.title}" if has_title
        text ..= " -- " if has_title and has_message
        text ..= "#{last_message.message}" if has_message

        lsp_progress_spinner = ((lsp_progress_spinner) % #spinner) + 1
        spinner_now = spinner[lsp_progress_spinner]

        vim.api.nvim_echo {{spinner_now .. " " .. text}}, false, {} if last_message.progress ~= nil

        lsp_progress_buffers[bufnr].lsp_progress_running = true
    -- vim.cmd 'autocmd User LspProgressUpdate UpdateLSPProgress'
    vim.cmd 'call timer_start(50, { _ -> luaeval("update_lsp_progress()") }, #{repeat: -1})'

-- Functionality
do
    global open_corresponding_pdf
    open_corresponding_pdf = ->
        filename = vim.fn.expand("%:r") .. ".pdf"
        if not vim.fn.filereadable filename
            vim.cmd "echoerr 'No such file: #{filename}'"
            return
        vim.cmd "silent exec '!nohup zathura #{filename} > /dev/null 2>&1 &'"

    global insert_line_above
    insert_line_above = ->
        count = vim.v.count1 - 1
        vim.cmd [[norm! Oa]]
        for _ = 1, count
            vim.cmd [[put _]]
            vim.cmd [[norm! k]]
        vim.cmd [[norm! ^"_D]]
        vim.cmd [[startinsert!]]
    global insert_line_below
    insert_line_below = ->
        count = vim.v.count1 - 1
        vim.cmd [[norm! oa]]
        for _ = 1, count
            vim.cmd [[put! _]]
            vim.cmd [[norm! j]]
        vim.cmd [[norm! ^"_D]]
        vim.cmd [[startinsert!]]

-- Mappings
do
    import applyKeymaps from require 'nest'

    EXPR_PREFIX = '<expr>'
    RECURSIVE_PREFIX = '<rec>'
    VISUAL_PREFIX = '<visual>'
    INSERT_PREFIX = '<insert>'
    myKeymaps = (maps) ->
        out = {}
        for k, v in pairs maps
            local mode
            if k\sub(1, #VISUAL_PREFIX) == VISUAL_PREFIX
                k = k\sub(#VISUAL_PREFIX+1, #k)
                mode = 'v'
            elseif k\sub(1, #INSERT_PREFIX) == INSERT_PREFIX
                k = k\sub(#INSERT_PREFIX+1, #k)
                mode = 'i'
            else
                mode = 'n'

            local expr
            if k\sub(1, #EXPR_PREFIX) == EXPR_PREFIX
                k = k\sub(#EXPR_PREFIX+1, #k)
                expr = true
            else
                expr = fase

            local noremap
            if k\sub(1, #RECURSIVE_PREFIX) == RECURSIVE_PREFIX
                k = k\sub(#RECURSIVE_PREFIX+1, #k)
                noremap = false
            else
                noremap = true

            if type(v) == 'table'
                v = myKeymaps v

            out[#out+1] =
                * k
                * v
                :mode
                options:
                    :expr
                    :noremap
        out

    vimcmd = (cmd) -> ':' .. cmd .. '<CR>'
    luacmd = (cmd) -> '<cmd>lua ' .. cmd .. '<CR>'
    plug = (op) -> '<Plug>(' .. op .. ')'
    addspecs = (op) -> op .. ':lua maybe_show_specs()<CR>'
    fzflua = (provider) -> vimcmd 'FzfLua ' .. provider

    applyKeymaps myKeymaps
        '<Leader>':
            -- FZF
            'e': fzflua 'files'
            'ge': fzflua 'git_files'
            'gg': fzflua 'git_status'
            'b': fzflua 'buffers'
            'H': fzflua 'help_tags'
            'F': fzflua 'filetypes'

            -- magma-nvim
            'r':
                '<expr>': 'nvim_exec("MagmaEvaluateOperator", v:true)'
                '<visual>': ':<C-u>MagmaEvaluateVisual<CR>'
                'r': vimcmd 'MagmaEvaluateLine'
                'c': vimcmd 'MagmaReevaluateCell'
                'd': vimcmd 'MagmaDelete'
                'o': vimcmd 'MagmaShowOutput'
                'n': vimcmd 'MagmaInit'

            -- vim-test
            't':
                't': vimcmd 'TestNearest'
                'f': vimcmd 'TestFile'
                'l': vimcmd 'TestLast'

            'G': vimcmd 'G' -- open fugitive

            ';': luacmd 'specs.show_specs()' -- highlight the cursor

            -- 'S': vimcmd 'set spell!' -- toggle spell
            -- 's': ':set spelllang=' -- set spell language

            'p': luacmd 'open_corresponding_pdf()' -- open corresponding PDF for the current [markup file]

            '.': vimcmd 'nohl' -- :nohl

            'o': -- open windows
                'c': vimcmd 'copen' -- open quickfix window
                't': vimcmd 'Trouble' -- open trouble window
            'q': -- close windows
                'c': vimcmd 'cclose' -- close quickfix window
                't': vimcmd 'TroubleClose' -- close trouble window

            'n': vimcmd 'set number!' -- toggle line numbers

        -- :cn and :cp
        '[q': vimcmd 'cp'
        ']q': vimcmd 'cn'

        -- spell suggest
        -- 'z=': fzflua 'spell_suggest'

        -- substitute
        '<C-s>':
            '<rec>':      plug 'SubversiveSubstitute'
            '<rec><C-s>': plug 'SubversiveSubstituteLine'

        -- dial.nvim
        '<rec><C-a>':         plug 'dial-increment'
        '<rec><C-x>':         plug 'dial-decrement'
        '<rec><visual><C-a>': plug 'dial-increment'
        '<rec><visual><C-x>': plug 'dial-decrement'
        '<rec>g<C-a>':        plug 'dial-increment-additional'
        '<rec>g<C-x>':        plug 'dial-decrement-additional'

        'g':
            -- misc window operations
            'w': "<C-w>"

            -- text alignment
            'a':
                '=': vimcmd [[Tabularize /=]]
                ':': vimcmd [[Tabularize /:\zs]]
                ' ': vimcmd [[Tabularize /,\zs]]

        'z':
            -- open symbols outline
            'g': vimcmd 'SymbolsOutline'

        -- specs & asterisk
        'n': addspecs 'n'
        'N': addspecs 'N'
        '<rec>*': addspecs plug 'asterisk-*'
        '<rec>#': addspecs plug 'asterisk-#'
        '<rec>g*': addspecs plug 'asterisk-g*'
        '<rec>g#': addspecs plug 'asterisk-g#'
        '<rec>z*': addspecs plug 'asterisk-z*'
        '<rec>z#': addspecs plug 'asterisk-z#'
        '<rec>gz*': addspecs plug 'asterisk-gz*'
        '<rec>gz#': addspecs plug 'asterisk-gz#'

        -- swap "go to mark" maps
        "'": "`"
        "`": "'"

        -- Make Y work like D
        'Y': 'y$'

        -- Map Q to quit if everything is saved
        'Q': vimcmd "qa"

        -- Change S to behave kinda like X
        'S': '"_Xi<CR><Esc>l'

        -- Change s to ys (normal) / S (visual)
        '<rec>s': 'ys'
        '<visual><rec>s': 'S'

        -- Change o/O to not insert text at multiple lines, when used with a count
        'O': luacmd "insert_line_above()"
        'o': luacmd "insert_line_below()"
