-- Plugin configurations
do
    -- vimpeccable
    import 'vimp'
    import map_command, nnoremap from require 'vimp'
    vimp.always_override = true

    -- startup screen
    map_command 'EditFile', ->
        in_git_repository = os.execute "git rev-parse --is-inside-work-tree >/dev/null 2>&1"
        if in_git_repository == 0
            vim.cmd "norm \\e"
        else
            vim.cmd "norm \\E"
    map_command 'EditDotFile', ->
        vim.env.GIT_DIR = vim.fn.expand("~/.dotfiles.git")
        vim.env.GIT_WORK_TREE = vim.fn.expand("~")
        vim.cmd 'EditFile'
    button = (sc, icon, txt, keybind, keybind_opts) ->
        opts =
            position: 'center'
            shortcut: sc
            cursor: 5
            width: 50
            align_shortcut: 'right'
            hl_shortcut: 'Keyword'
        if keybind
            keybind_opts = keybind_opts or {noremap: true, silent: true, nowait: true}
            opts.keymap = {"n", sc, keybind, keybind_opts}

        on_press = ->
            key = vim.api.nvim_replace_termcodes sc .. "<Ignore>", true, false, true
            vim.api.nvim_feedkeys key, "t", false

        {
            type: 'button'
            val: icon .. " " .. txt
            :on_press
            :opts
        }

    -- shade.nvim
    -- (require 'shade').setup
    --     overlay_opacity: 80
    --     opacity_step: 1

    (require 'scrollbar').setup
        excluded_filetypes:
            * "prompt"
            * "TelescopePrompt"
            * "noice"
            -- * "neo-tree"
        handlers:
            cursor: false
            gitsigns: false -- true
            -- search: true -- requires hlslens

    (require 'colortils').setup!

    -- -- statusline
    -- my_theme = {
    --     a:
    --         bg: '#C8ACF6'
    --         fg: '#000000'
    --     b:
    --         bg: '#4F535A'
    --         fg: '#FFFFFF'
    --         gui: 'bold'
    --     c:
    --         bg: '#2F333A'
    --         fg: '#cccccc'
    -- }
    -- winbar =
    --     lualine_a: {}
    --     lualine_b: {{
    --         'filename',
    --         path: 1 -- show the relative path
    --     }}
    --     lualine_c:
    --         * ->
    --             ft = vim.o.filetype
    --             has_lsp = #vim.lsp.buf_get_clients(0) > 0
    --             if #ft == 0
    --                 ""
    --             else
    --                 if has_lsp
    --                     ft .. "⁺"
    --                 else
    --                     ft
    --         * 'b:keymap_name'
    --         * {
    --             'diagnostics',
    --             colored: true
    --             sections:
    --                 * 'error'
    --                 * 'warn'
    --                 * 'info'
    --         }
    --     lualine_x:
    --         * 'location'
    --     lualine_y: {}
    --     lualine_z: {}
    -- (require 'lualine').setup
    --     options:
    --         theme:
    --             normal: my_theme
    --             insert: my_theme
    --             visual: my_theme
    --             replace: my_theme
    --             command: my_theme
    --             inactive: my_theme
    --         component_separators:
    --             left: ''
    --             right: ''
    --         section_separators:
    --             left: ''
    --             right: ''
    --         always_divide_middle: true
    --         globalstatus: true
    --         disabled_filetypes:
    --             winbar:
    --                 * 'neo-tree'
    --                 * 'Trouble'
    --     winbar: winbar
    --     inactive_winbar: winbar
    --     sections:
    --         lualine_a:
    --             * 'branch'
    --         lualine_b:
    --             * -> vim.fn.getcwd!
    --         lualine_c: {}
    --         lualine_x:
    --             * -> vim.fn.expand '$USER'
    --         lualine_y:
    --             * 'hostname'
    --         lualine_z:
    --             * ->
    --                 import 'dap'
    --                 if dap.session! ~= nil
    --                     "Debugging"
    --                 else
    --                     ""
    --             * ->
    --                 register = vim.fn.reg_recording!
    --                 if register == ""
    --                     ""
    --                 else
    --                     "recording @#{register}"
    --     extensions:
    --         * 'aerial'
    --         * 'fzf'
    --         * 'fugitive'
    --         * 'quickfix'
    --         * 'neo-tree'

    devicons = require 'nvim-web-devicons'
    (require "incline").setup
        render: (props) ->
            filename = vim.fn.fnamemodify (vim.api.nvim_buf_get_name props.buf), ':t'
            if filename == '' then filename = '[No Name]'

            -- filetype = vim.o.filetype
            filetype = vim.fn.getbufvar props.buf, "&filetype"
            has_lsp = #(vim.lsp.get_clients bufnr: tonumber(props.buf)) > 0
            if #filetype > 0 and has_lsp
                filetype = filetype .. "⁺"

            -- -- ft_icon, ft_color = devicons.get_icon_color filename
            -- ft_icon, ft_color = devicons.get_icon_color_by_filetype filetype

            modified = vim.bo[props.buf].modified

            -- bgcolor = "#28303e"
            bgcolor = "#555555"
            return
                * { '', guifg: bgcolor }
                *
                    *
                        -- * if ft_icon then { ft_icon, '  ', filetype, ' ¦ ' } else ''
                        -- * if ft_icon then { filetype, ' ¦ ' } else ''
                        * if #filetype > 0 then { filetype, ' ' } else ''
                        guifg: "#888888"
                    * filename
                    * modified and { '*', guifg: '#888888', gui: 'bold' } or ''
                    guibg: bgcolor
                * { '', guifg: bgcolor }

    -- (require 'luatab').setup
    --     windowCount: -> ''

    (require 'bufferline').setup
        animation: true
        auto_hide: false
        tabpages: true
        closable: true
        clickable: true
        -- diagnostics: {}
        -- exclude_ft:
        -- exclude_name:
        -- hide
        highlight_alternate: true
        highlight_visible: true
        icons:
            filetype:
                enabled: true
        icon_custom_colors: false
    -- vim.api.nvim_create_autocmd 'BufWinEnter'
    --     pattern: "*"
    --     callback: -> if vim.bo.filetype == 'neo-tree'
    --         (require 'bufferline.api').set_offset 40, ''
    -- vim.api.nvim_create_autocmd 'BufWinLeave'
    --     pattern: "*"
    --     callback: -> if vim.fn.expand('<afile>')\match('neo-tree')
    --         (require 'bufferline.api').set_offset 0, ''

    -- do
    --     theme =
    --         fill: "TabLineFill"
    --         head: "TabLine"
    --         current_tab: "TabLineSel"
    --         fg: "Normal"
    --         tab: "TabLine"
    --
    --     (require 'tabby.tabline').set((line) -> {
    --         {
    --             line.sep(" ", theme.head, theme.fill),
    --         },
    --         line.tabs().foreach((tab) ->
    --             hl = tab.is_current! and theme.current_tab or theme.tab
    --             {
    --                 line.sep("⎸", theme.fg, hl),
    --                 -- tab.current_win!.buf!.type!,
    --                 -- tab.is_current! and " " or " ",
    --                 tab.number!,
    --                 tab.name!,
    --                 line.sep("⎹", theme.fg, hl),
    --                 hl: hl,
    --                 margin: ' ',
    --             }
    --         ),
    --         line.spacer!,
    --         hl: theme.fill,
    --     })

    -- fzf-lua
    (require 'fzf-lua').setup
        -- fzf_opts:
        --     "--layout": 'default'
        keymap:
            builtin:
                "<C-l>": "toggle-preview"
            fzf:
                "ctrl-l": "toggle-preview"
        winopts:
            preview:
                hidden: 'hidden'
        lsp:
            severity: "warning"

    -- telescope
    (require 'telescope').setup
        defaults:
            sorting_strategy: 'ascending'
            layout_strategy: 'vertical'
            layout_config:
                prompt_position: 'top'
                mirror: true
                preview_height: 0.3
        pickers:
            buffers:
                show_all_buffers: false
                ignore_current_buffer: true
                sort_mru: true
                sort_lastused: true
    (require 'telescope').load_extension 'zoxide'
    (require 'telescope._extensions.zoxide.config').setup
        mappings:
            default:
                after_action: (selection) ->
                    vim.notify "Directory changed to " .. selection.path

    -- (require 'trouble').setup
    --     height: 5
    --     padding: false
    --     indent_lines: false
    --     auto_preview: false
    --     auto_open: true
    --     auto_close: true

    -- (require 'todo-comments').setup
    --     signs: false
    --     keywords:
    --         FIX:
    --             icon: " "
    --             color: "error"
    --             alt:
    --                 * "FIXME"
    --                 * "BUG"
    --                 * "FIXIT"
    --                 * "ISSUE"
    --         TODO:
    --             icon: " "
    --             color: "info"
    --         HACK:
    --             icon: " "
    --             color: "warning"
    --         WARN:
    --             icon: " "
    --             color: "warning"
    --             alt:
    --                 * "WARNING"
    --                 * "XXX"
    --         PERF:
    --             icon: " "
    --             alt:
    --                 * "OPTIM"
    --                 * "PERFORMANCE"
    --                 * "OPTIMIZE"
    --     highlight:
    --         comments_only: true
    --     search:
    --         command: "rg"
    --         args:
    --             * "--color=never"
    --             * "--no-heading"
    --             * "--with-filename"
    --             * "--line-number"
    --             * "--column"
    --         pattern: [[\b(KEYWORDS)\b]]

    (require "neo-tree").setup
        close_if_last_window: false -- sure?
        popup_border_style: "rounded"
        enable_git_status: true
        enable_diagnostics: false
        sort_case_insensitive: true
        default_component_configs:
            container:
                enable_character_fade: true
            indent:
                indent_size: 2
                padding: 1
                with_markers: false
                indent_maker: "│"
                last_indent_marker: "│"
                highlight: "IndentBlanklineChar"
                with_expanders: true
                expander_collapsed: ""
                expander_expanded: ""
                expander_highlight: "NeoTreeExpander"
            icon:
                folder_closed: ""
                folder_empty: ""
                folder_empty: ""
                default: "*"
                highlight: "NeoTreeFileIcon"
            modified:
                symbbol: "[+]"
                highlight: "NeoTreeModified"
            name:
                trailing_slash: true
                use_git_status_colors: false
                highlight: "NeoTreeFileName"
            git_status:
                symbols:
                    added: "A"
                    modified: "M"
                    deleted: "D"
                    renamed: "R"
                    untracked: "?"
                    ignored: "(I)"
                    unstaged: "" -- ""
                    staged: "" -- ""
                    conflict: "!"
        window:
            -- ...
        nesting_rules: {}
        filesystem:
            filtered_items:
                visible: false
                hide_dotfiles: false
                hide_hidden: false
                hide_gitignored: true
                hide_by_name:
                    * ".git"
                never_show:
                    * ".DS_Store"
            follow_current_file:
                enabled: true
            group_empty_dirs: false
            hijack_netrw_behaviour: "open_default"
            -- use_libuv_file_watcher: false
        buffers:
            follow_current_file:
                enabled: true
            group_empty_dirs: false
            show_unloaded: true -- ???

    -- nvim-ufo
    -- (require "ufo").setup
    --     open_fold_hl_timeout: 0
    --     fold_virt_text_handler: (virtText, lnum, endLnum, width, truncate) ->
    --         newVirtText = {}
    --         suffix = " ⋯ "
    --         targetWidth = width - vim.fn.strdisplaywidth suffix
    --         curWidth = 0
    --         if #virtText > 0
    --             chunkText = virtText[1][1]
    --             hlGroup = virtText[1][2]
    --             str = ""
    --             shiftwidth = vim.o.shiftwidth
    --             pos = 1
    --             for c in chunkText\gmatch"."
    --                 if c != ' '
    --                     break
    --                 if math.fmod(pos - 1, shiftwidth) == 0
    --                     table.insert newVirtText, {str, hlGroup}
    --                     table.insert newVirtText, {"│", "IndentBlanklineChar"}
    --                     str = ""
    --                 else
    --                     str = str .. c
    --                 pos = pos + 1
    --             table.insert newVirtText, {str .. (chunkText\sub pos, -1), hlGroup}
    --             table.remove virtText, 1
    --         for _, chunk in ipairs virtText
    --             chunkText = chunk[1]
    --             chunkWidth = vim.fn.strdisplaywidth chunkText
    --             if targetWidth > curWidth + chunkWidth
    --                 table.insert newVirtText, chunk
    --             else
    --                 chunkText = truncate chunkText, targetWidth - curWidth
    --                 hlGroup = chunk[2]
    --                 table.insert newVirtText, {chunkText, hlGroup}
    --                 chunkwidth = vim.fn.strdisplaywidth chunkText
    --                 if curWidth + chunkWidth < targetWidth
    --                     suffix = suffix .. (' ')\rep(targetWidth - curWidth - chunkWidth)
    --                 break
    --             curWidth = curWidth + chunkWidth
    --         table.insert newVirtText, {suffix, 'MoreMsg'}
    --         newVirtText

    -- popui
    vim.ui.select = require "popui.ui-overrider"
    vim.g.popui_border_style = "rounded"

    -- -- specs
    -- global specs, should_show_specs, maybe_show_specs
    -- import 'specs'
    --
    -- should_show_specs = false -- vim.fn.exists('neovide') == 0
    --
    -- specs.setup
    --     show_jumps: should_show_specs
    --     min_jump: 2
    --     popup:
    --         delay_ms: 0
    --         inc_ms: 8
    --         blend: 60
    --         width: 25
    --         winhl: 'Specs'
    --         fader: specs.empty_fader
    --         resizer: specs.shrink_resizer
    --     ignore_filetypes:
    --         * "dashboard"
    --     ignore_buftypes:
    --         "nofile": true
    --
    -- maybe_show_specs = -> specs.show_specs! if should_show_specs

    -- zen-mode
    (require 'zen-mode').setup!

    -- gitsigns
    (require 'gitsigns').setup
        signcolumn: true
        numhl: false
        linehl: false
        word_diff: false  -- true
        -- keymaps:
        --     noremap: true
        --     ['n [c']: { expr: true, "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'" }
        --     ['n ]c']: { expr: true, "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'" }
        --
        --     ["n <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk()<CR>'
        --     ["v <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
        --     ["n <leader>gu"]: '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>'
        --     ["n <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk()<CR>'
        --     ["v <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
        --     -- ["n <leader>gX"]: '<cmd>lua require"gitsigns".reset_buffer()<CR>'
        --     ["n <leader>gd"]: '<cmd>lua require"gitsigns".preview_hunk()<CR>'
        --     ["n <leader>gb"]: '<cmd>lua require"gitsigns".blame_line{full = true}<CR>'
        --
        --     ["o ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
        --     ["x ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
        preview_config:
            border: 'rounded'
            style: 'minimal'
            relative: 'cursor'
            row: 1
            col: 0

    -- limelight
    vim.g.limelight_conceal_ctermfg = 242
    vim.g.limelight_conceal_guifg = '#606060'

    -- indent-blankline
    (require 'ibl').setup
      indent:
        char: "│"
      -- vim.g.indent_blankline_show_trailing_blankline_indent = false
      exclude:
        buftypes:
          * "terminal"
        filetypes:
          * 'dashboard'
          * 'alpha'
          * 'packer'
          * 'help'
          * 'Outline'
          * 'aerial'
          * 'Trouble'
          * "neo-tree"

    (require 'virt-column').setup
        -- char: "·"
        -- char: "╷"
        char: "╵"
    vim.opt.colorcolumn = "+1"

    -- nvim-treesitter-context
    (require 'treesitter-context').setup
        enable: true
        throttle: true
        max_lines: 6
        patterns:
            default:
                * "class"
                * "function"
                * "method"
                * "for"
                * "while"
                * "if"
                * "switch"
                * "case"
            rust:
                * "impl_item"
                * "struct_item"
                * "enum_item"
                * "match_arm"
                * "match_expression"
                * "else_clause"
                * "loop_expression"
                * "mod_item"
        separator: "╴"

    (require 'treesitter-unit').setup {}
    -- (require 'treesitter-unit').toggle_highlighting "TreeHighlight"

    -- context.vim
    -- vim.g.context_nvim_no_redraw = 1

    -- vim-matchup
    vim.g.matchup_matchparen_offscreen = {}

    -- fidget.nvim
    (require "fidget").setup
        text:
            spinner: "dots"

    -- noice.nvim
    (require "noice").setup
        lsp_progress:
            enabled: false
        routes:
            * -- hide 'written' messages
                filter:
                    event: "msg_show"
                    kind: ""
                    find: "written"
                opts:
                    skip: true
            * -- hide search count
                filter:
                    event: "msg_show"
                    kind: "search_count"
                opts:
                    skip: true
        views:
            cmdline_popup:
                position:
                    row: 5
                    col: "50%"
                size:
                    width: 60
                    height: "auto"
            popupmenu:
                relative: "editor"
                position:
                    row: 8
                    col: "50%"
                size:
                    width: 60
                    height: 10
                border:
                    style: "rounded"
                    padding: {0, 1}
                win_options:
                    winhighlight:
                        Normal: "Normal"
                        FloatBorder: "DiagnosticInfo"

    -- nvim-notify
    vim.o.termguicolors = true
    (require 'notify').setup
        stages: "slide"
        timeout: 750

    -- nvim-pqf
    (require 'pqf').setup!

    -- vim-wordmotion
    vim.g.wordmotion_spaces = ''

    -- vim-localvimrc
    vim.g.localvimrc_persistent = 1
    vim.g.localvimrc_persistence_file = vim.fn.expand "~/.local/misc/localvimrc_persistent"

    -- suda.vim
    vim.g.suda_smart_edit = 1

    -- fugitive
    map_command 'Fugitive', ->
        vim.cmd ":G"
        vim.cmd "only"
        nnoremap {"buffer"}, "gq", ":qa!<CR>"

    -- octo.nvim
    (require "octo").setup
        suppress_missing_scope:
            projects_v2: true

    -- hunk.nvim
    (require "hunk").setup!

    -- -- magma-nvim
    -- if (os.getenv "NO_MAGMA") == nil
    --     (require 'magma').setup
    --         automatically_open_output: true
    --         wrap_output: true
    --         output_window_borders: true
    --         cell_highlight_group: "CursorLine"
    --         save_path: vim.fn.stdpath("data") .. "/magma"
    --         image_provider: "None"
    --         show_mimetype_debug: true
    --     -- vim.g.magma_automatically_open_output = false
    --     -- vim.g.magma_show_mimetype_debug = true
    --     -- vim.g.magma_image_provider = "ueberzug"

    -- vim-test
    vim.g['test#strategy'] = 'neovim'
    vim.g['test#neovim#start_normal'] = 1
    vim.g['test#basic#start_normal'] = 1

    -- nvim-cmp
    import 'cmp'
    cmp.setup
        -- completion:
        --     autocomplete: false
        mapping:
            "<C-c>": cmp.mapping.complete!
            "<C-l>": cmp.mapping.confirm select: true
            "<C-j>": cmp.mapping.select_next_item behaviour: cmp.SelectBehavior.Select
            "<C-k>": cmp.mapping.select_prev_item behaviour: cmp.SelectBehavior.Select
            "<C-h>": cmp.mapping.close!
        sources:
            * name: "crates"
            * name: "nvim_lsp"
            * name: "path"
            -- * name: "buffer"
        snippet:
            expand: (args) -> vim.fn["vsnip#anonymous"] args.body

    -- crates.nvim
    (require 'crates').setup!
    -- vim.api.nvim_create_autocmd "DiagnosticChanged",
    --     callback: -> do
    --         row, _col = vim.api.nvim_win_get_cursor(0)
    --         vim.cmd "norm " .. (if row == 0 then "jk" else "kj")

    -- Automatic formatting
    (require 'lsp-format').setup
        sync: true

    -- virt_lines.nvim
    (require 'lsp_lines').setup!

    -- LSP
    do
        import 'lspconfig' as nvim_lsp

        capabilities = (require 'cmp_nvim_lsp').default_capabilities!
        capabilities.textDocument.foldingRange =
            dynamicRegistration: false
            lineFoldingOnly: true

        on_attach = (client) ->
            -- vim.api.nvim_create_autocmd {'InsertLeave', 'CursorHold'},
            --     buffer: vim.api.nvim_get_current_buf!
            --     callback: -> vim.lsp.buf.format!
            (require 'lsp-format').on_attach client

            vim.notify "Ready.", "info", title: "LSP", timeout: 500

        -- Configure LSPs
        nvim_lsp.rust_analyzer.setup
            :capabilities
            :on_attach
            settings:
                ["rust-analyzer"]:
                    checkOnSave:
                        command: "clippy"
                        -- extraArgs:
                        --     * "--target-dir"
                        --     * ".target-rust_analyzer_check"
                    cargo:
                        loadOutDirsFromCheck: true
                    procMacro:
                        enable: true
                    diagnostics:
                        enable: false
        nvim_lsp.zls.setup
            :capabilities
            :on_attach
        nvim_lsp.clangd.setup
            :capabilities
            :on_attach
            cmd:
                * "clangd"
                * "--background-index"
                * "--clang-tidy"
        nvim_lsp.lua_ls.setup
            :capabilities
            :on_attach
            cmd:
                * "lua-language-server"
                * "-E"
                * "/usr/share/lua-language-server/main.lua"
        -- nvim_lsp.pyright.setup
        --     :on_attach
        --     :capabilities
        nvim_lsp.pylsp.setup
            :on_attach
            :capabilities
        nvim_lsp.hls.setup
            :on_attach
            :capabilities
        nvim_lsp.tinymist.setup
            :on_attach
            :capabilities
        -- nvim_lsp.typst_lsp.setup
        --     :on_attach
        --     :capabilities
        --     settings:
        --         -- ["typst-lsp"]:
        --         -- exportPdf: "onType"
        --         exportPdf: "onSave"
        -- nvim_lsp.texlab.setup
        --     :on_attach
        --     :capabilities
        nvim_lsp.vimls.setup
            :on_attach
            :capabilities
        nvim_lsp.rnix.setup
            :on_attach
            :capabilities
        nvim_lsp.ts_ls.setup
            :on_attach
            :capabilities
        -- nvim_lsp.denols.setup
        --     :on_attach
        --     :capabilities
        nvim_lsp.sourcekit.setup
            :on_attach
            :capabilities

        vim.cmd [[autocmd BufNewFile,BufRead *.lpt setf lambdapitau]]
        (require 'lspconfig.configs').lambdapitau =
            default_config:
                cmd:
                    * "cargo"
                    * "run"
                    * "lsp"
                filetypes:
                    * "lambdapitau"
                root_dir: (fname) -> (require 'lspconfig.util').find_git_ancestor(fname)
                settings: {}

        nvim_lsp.lambdapitau.setup
            :on_attach
            :capabilities

        vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with vim.lsp.diagnostic.on_publish_diagnostics,
                virtual_text: false
                virtual_lines: true
                underline: true
                signs: false
                update_in_insert: true

        vim.lsp.handlers["textDocument/hover"] = vim.lsp.with vim.lsp.handlers.hover,
            border: "rounded"

    -- treesitter
    vim.opt.runtimepath\append "$HOME/.local/share/treesitter"
    (require 'nvim-treesitter.configs').setup
        parser_install_dir: "$HOME/.local/share/treesitter"
        highlight:
            enable: true
            additional_vim_regex_highlighting: false
            disable:
                * "dart"
        incremental_selection:
            enable: true
            keymaps:
                init_selection: 'g.'
                node_decremental: ','
                node_incremental: '.'
            disable:
                * "dart"
        textsubjects:
            enable: true
            prev_selection: '`'
            keymaps:
                ["<CR>"]: 'textsubjects-smart'
                -- ["o<CR>"]: 'textsubjects-container-outer'
                -- ["i<CR>"]: 'textsubjects-container-inner'
            disable:
                * "dart"
        textobjects:
            select:
                enable: true
                lookahead: true
                keymaps:
                    "iA": "@attribute.inner"
                    "aA": "@attribute.outer"
                    "ib": "@block.inner"
                    "ab": "@block.outer"
                    "ic": "@call.inner"
                    "ac": "@call.outer"
                    "is": "@class.inner"
                    "as": "@class.outer"
                    "a-": "@comment.outer"
                    "i-": "@comment.outer"
                    "if": "@function.inner"
                    "af": "@function.outer"
                    "ia": "@parameter.inner"
                    "aa": "@parameter.outer"
                selection_modes:
                    "@parameter.outer": 'v'
                    "@function.outer": 'V'
                    '@class.outer': '<C-v>'
                include_surrounding_whitespace: true
            disable:
                * "dart"
        playground:
            enable: true
            disable:
                * "dart"
        indent:
            enable: false -- currently, this is broken.
            disable:
                * "dart"

    -- aerial
    (require 'aerial').setup
        backends:
            * "treesitter"
            * "markdown"
            * "lsp"
        close_behaviour: "close"
        post_jump_cmd: "normal! zt"
        default_direction: "float"
        float:
            border: "rounded"
            relative: "editor"
            override: (conf) ->
                local stats = vim.api.nvim_list_uis![1]
                local width = stats.width
                local height = stats.height - 1 -- to account for the statusline
                local padding_x = math.floor(0.1 * width)
                local padding_y = math.floor(0.1 * height)

                conf.width = width - 2*padding_x
                conf.height = height - 2*padding_y
                conf.row = padding_y - 1
                conf.col = padding_x - 1
                conf.anchor = "NW"

                conf
        min_width: 60
        filter_kind:
            * "Class"
            * "Constructor"
            * "Enum"
            * "Function"
            * "Interface"
            * "Module"
            * "Method"
            * "Struct"
        icons:
            Class: "class"
            Constructor: "func"
            Enum: "enum"
            Function: "func"
            Interface: "trait"
            Module: "module"
            Method: "func"
            Struct: "struct"
        nerd_font: true
        -- TODO post_jump_cmd       call beacon
        close_on_select: true
        show_guides: false

    -- DAP
    import 'dap'

    dap.adapters.lldb =
        type: 'executable'
        command: 'lldb-vscode'
        name: "lldb"

    dap.configurations.rust =
        *
            name: "Launch"
            type: 'lldb'
            request: 'launch'
            program: -> vim.fn.input "Path to executable: ", vim.fn.getcwd! .. "/target/debug/", 'file'
            cwd: '${workspaceFolder}'
            stopOnEntry: false
            args: {}
            runInTerminal: false
            postRunCommands:
                * 'process handle -p true -s false -n false SIGWINCH'

    (require 'dapui').setup!

    -- neotest
    (require 'neotest').setup
        adapters:
            * (require "neotest-python")
                dap:
                    justMyCode: false
            * (require "neotest-plenary")
            -- * (require "neotest-rust")
            * (require "neotest-vim-test")
                ignore_file_types:
                    * "python"
                    * "vim"
                    * "lua"
                    -- * "rust"
        discovery:
            enabled: true
        icons:
            child_indent: "│"
            child_prefix: "├"
            collapsed: "─"
            expanded: "┬"
            final_child_indent: " "
            final_child_prefix: "╰"
            non_collapsible: "─"
            failed: "✗"
            passed: "✓"
            running: "…"
            skipped: " "
            unknown: "?"
        summary:
            enabled: true
        output:
            enabled: true
        diagnostic:
            enabled: false
        status:
            enabled: true
            virtual_text: true
            signs: false
    -- TODO neotest.diagnostic
    -- TODO neotest.status
    -- vim.g.ultest_output_on_line = false
    -- vim.g.ultest_pass_sign = "✓"
    -- vim.g.ultest_fail_sign = "✗"
    -- vim.g.ultest_running_sign = "⊙"
    -- vim.g.ultest_not_run_sign = "?"

    -- -- AI
    -- (require "avante").setup
    --     provider: "claude"

    -- Comment.nvim
    (require 'Comment').setup!

    -- nvim-autopairs
    (require 'nvim-autopairs').setup {}

    -- -- pear-tree
    -- vim.g.pear_tree_repeatable_expand = 0
    -- vim.g.pear_tree_ft_disabled =
    --     * 'telescope'
    --
    -- global all_peartree_pairs
    -- all_peartree_pairs =
    --     basic_pairs: -- parentheses, bracktes, etc.
    --         ["("]: closer: ")"
    --         ["["]: closer: "]"
    --         ["{"]: closer: "}"
    --     quotes_and_apostrophes: -- quotes, apostrophes, etc.
    --         ["\""]: closer: "\""
    --         ["'"]: closer: "'"
    --         ["`"]: closer: "`"
    --     math_dolars: -- inline&display math
    --         ["$"]: closer: "$"
    --         ["$$"]: closer: "$$"
    --     texmath: -- TeX Math
    --         -- -- delimiters
    --         ["\\\\("]: closer: "\\\\)"
    --         ["\\\\["]: closer: "\\\\]"
    --         ["\\\\left("]: closer: "\\\\right)"
    --         ["\\\\left["]: closer: "\\\\right]"
    --         ["\\\\{"]: closer: "\\\\}"
    --         ["\\\\left\\\\{"]: closer: "\\\\right\\\\}"
    --         ["\\\\lceil"]: closer: "\\\\rceil"
    --         ["\\\\left\\\\lceil"]: closer: "\\\\right\\\\rceil"
    --         ["\\\\lfloor"]: closer: "\\\\rfloor"
    --         ["\\\\left\\\\lfloor"]: closer: "\\\\right\\\\rfloor"
    --         ["\\\\lvert"]: closer: "\\\\rvert"
    --         ["\\\\left\\\\lvert"]: closer: "\\\\right\\\\rvert"
    --         ["\\\\lVert"]: closer: "\\\\rVert"
    --         ["\\\\left\\\\lVert"]: closer: "\\\\right\\\\rVert"
    --         -- -- multi-args
    --         ["\\\\frac"]: closer: "{}{}"
    --         ["\\\\inn"]: closer: "{}{}"
    --         ["\\\\diff"]: closer: "{}{}"
    --         ["\\\\pdiff"]: closer: "{}{}"
    --         ["\\\\sqrt["]: closer: "]{}"
    --         -- -- LaTeX environments
    --         ["\\\\begin{*}"]: closer: "\\\\end{*}", until: "}"
    --     xml: -- XML tags
    --         ["<!--"]: closer: "-->"
    --         ["<*>"]: closer: "</*>", until: "\\W"
    --     markdown: -- Markdown formatting
    --         ["\\*"]: closer: "\\*"
    --         ["\\*\\*"]: closer: "\\*\\*"
    --         ["```"]: closer: "```"
    --         [":::"]: closer: ":::"
    --     templates: -- c++ templates / rust type variables
    --         ["<"]: closer: ">", not_at: {"\\W", "^"}
    --
    -- global pairs_per_filetype, set_pairs_for_filetype
    -- pairs_per_filetype =
    --     xml:        {'xml'}
    --     html:       {'xml'}
    --     tex:        {'basic_pairs', 'math_dolars', 'texmath'}
    --     markdown:   {'basic_pairs', 'math_dolars', 'markdown', 'xml'}
    --     python:     {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
    --     rust:       {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
    --     cpp:        {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
    --     python:     {'basic_pairs', 'quotes_and_apostrophes'}
    --     -- TODO: javascript
    --     -- TODO: haskell
    --     -- TODO: lua
    -- set_pairs_for_filetype = (filetype) ->
    --     outpairs = {}
    --     pair_names_for_filetype = pairs_per_filetype[filetype]
    --     if pair_names_for_filetype == nil
    --         outpairs = vim.g.pear_tree_pairs
    --     else
    --         for _, subpairs_name in ipairs pair_names_for_filetype
    --             subpairs = all_peartree_pairs[subpairs_name]
    --             for k, v in pairs subpairs
    --                 outpairs[k] = v
    --     vim.b.pear_tree_pairs = outpairs
    --
    -- vim.cmd [[autocmd FileType * lua set_pairs_for_filetype(vim.o.filetype)]]
    --
    -- vim.g.pear_tree_pairs = basic_pairs

    -- vim-table-mode
    vim.g.table_mode_map_prefix = '<Leader><Bar>'
    vim.g.table_mode_toggle_map = '<Bar>'

    -- python-syntax
    vim.g.python_version_2                          = false
    vim.g.python_highlight_builtins                 = true
    vim.g.python_highlight_builtin_objs             = true
    vim.g.python_highlight_builtin_types            = true
    vim.g.python_highlight_builtin_funcs            = true
    vim.g.python_highlight_builtin_funcs_kwarg      = false
    vim.g.python_highlight_exceptions               = true
    vim.g.python_highlight_string_formatting        = true
    vim.g.python_highlight_string_format            = true
    vim.g.python_highlight_string_templates         = true
    vim.g.python_highlight_indent_errors            = false
    vim.g.python_highlight_space_errors             = false
    vim.g.python_highlight_doctests                 = true
    vim.g.python_highlight_func_calls               = false
    vim.g.python_highlight_class_vars               = true
    vim.g.python_highlight_operators                = true
    vim.g.python_highlight_file_headers_as_comments = true

    -- vim-cpp-modern
    vim.g.cpp_no_function_highlight        = false
    vim.g.cpp_named_requirements_highlight = true

    -- vim-markdown
    vim.g.markdown_enable_insert_mode_leader_mappings = false

    -- headlines.nvim
    (require 'headlines').setup!

    -- moonscript-vim
    -- the official YueScript syntax is too slow for me, so I'll use MoonScript syntax for YueScript
    --   (they are similar enough, I think it'll be fine).
    vim.cmd [[autocmd BufNewFile,BufRead *.yue setf moon]]

    -- Typst
    vim.cmd [[autocmd BufNewFile,BufRead *.typ setf typst]]

-- Lots of Vim options
do
    -- Set the regex engine
    vim.o.regexpengine = 1

    --- Enable the mouse
    vim.o.mouse = 'a' -- enable all mouse features

    --- Setup statusbar
    vim.o.showmode = false -- don't show the current mode below the statusbar
    vim.o.laststatus = 0 -- use a global statusline
    vim.o.cmdheight = 0 -- hide the command line if there's nothing to show
    -- vim.o.statusline = [[%h%w%q%f %r %m (%L lines) @ %l:%c (%p%%)%=%y LSP]] -- set the statusline to a horizontal separator
    vim.o.ruler = false -- remove the ruler

    --- Setup tabbar
    vim.o.showtabline = 2 -- always show the tabline

    --- Setup :grep
    vim.o.grepprg = [[rg --vimgrep --hidden --glob '!.git']]

    --- Setup line wrap
    vim.o.wrap = false -- wrap lines
    vim.o.linebreak = true -- don't break words on wrap
    vim.o.breakindent = true -- indent wrapped lines
    vim.o.showbreak = "… " -- prefix for wrapped lines

    --- Set "start of line" mode
    vim.o.startofline = true

    --- Set case sensitiveness of the search
    vim.o.ignorecase = true -- by default, case insensitive
    vim.o.smartcase = true -- but if there are capital letters, then case sensitive

    --- Setup the foldcolumn
    vim.o.foldcolumn = '0' -- no foldcolumn
    vim.o.foldlevel = 99 -- for nvim-ufo
    vim.o.foldlevelstart = 99 -- for nvim-ufo
    vim.o.foldenable = true -- enable folds
    vim.o.foldminlines = 1 -- require at least 1 line of content to create a fold

    --- Show the signcolumn
    -- vim.o.signcolumn = 'auto:1-3' -- automatically resize signcolumn to show at most 3 signs, and at least 1 sign
    vim.o.signcolumn = 'yes:1' -- show always one sign

    --- Show line numbers
    vim.o.number = true -- show line numbers
    vim.o.numberwidth = 1 -- use the least amount of space for the line numbers

    --- Use 4 spaces instead of tabs
    vim.o.expandtab = true -- expand tabs
    vim.o.shiftwidth = 4   -- how many sapces to use for >> and <<
    vim.o.softtabstop = 4  -- how many sapces to use for tab

    --- Keep indentation structure
    vim.o.autoindent = true -- use same indentation level for the neighbouring lines
    vim.o.cinoptions = [[L0,N-s,E-s,(0,mN,j1,J1,P1]] -- setup better C/C++ autoindent

    -- -- Don't highlight the current line
    vim.o.cursorline = false -- don't show the cursorline

    --- Set the updatetime
    vim.o.updatetime = 500 -- how much time between updates, in ms

    --- Remove the bell sound
    vim.o.belloff = 'all' -- disable the bell everywhere

    --- Fix backspace
    vim.o.backspace = "2" -- when in insert mode, backspace will remove indentation and newlines

    --- Open new vertical splits to the right and horizontal splits below
    vim.o.splitright = true -- open new vertical splits to the right
    vim.o.splitbelow = true -- open new horizontal splits below

    --- Setup undo persistence
    vim.o.undofile = true -- save undos to an undo file

    --- Allow hidden buffers
    vim.o.hidden = true -- hide buffers when leaving them, instead of deleting them

    --- Setup views
    vim.o.viewoptions = 'cursor' -- save only the cursor position in a view

    --- Highlight search results
    vim.o.hlsearch = true -- highlight search results

    --- Setup search wrapping
    vim.o.wrapscan = false -- disable search wrapping

    --- Preview search/substitute pattern matches
    vim.o.incsearch = true -- live preview search results
    vim.o.inccommand = 'nosplit' -- live preview command (:s, :g, etc.) results

    --- Show possible Ex command completions above
    vim.o.wildmenu = true -- show completion menu in Ex commands

    --- Setup conceal
    vim.o.concealcursor = '' -- don't conceal the current line in any mode
    vim.o.conceallevel = 0 -- conceal nothing

    --- Show trailing whitespace and tabs
    vim.o.list = true -- show listchars
    vim.o.listchars = [[tab:--,trail:┈]] -- highlight tabs and trailing whitespace

    -- Remove `~` sign from filler lines
    vim.o.fillchars = [[eob: ,stl: ,stlnc: ]]

    --- Setup autocompletion in a way that is better
    vim.o.completeopt = 'menuone,noinsert,noselect' -- menuone: show a menu even if there's only one match
                                                    -- noinsert: only insert when we select
                                                    -- noselect: no automatic selection
    vim.o.complete = '.,i,d' -- look for completions in the current buffer (.) and in the included files (i,d)

    --- Setup verbosity
    vim.o.shortmess = [[filnxtToOFcI]] -- don't show messages regarding completion

    --- Always keep 3 lines around the cursor
    vim.o.scrolloff = 3 -- keep 3 lines above&below the cursor at all times

    --- Setup sessions
    vim.o.sessionoptions = [[blank,buffers,curdir,help,tabpages,winsize,tabpages,globals]]

    --- Setup spellcheck
    vim.o.spelllang = 'en_us,pt_br'
    vim.o.spell = false
    vim.cmd [[autocmd TermOpen * setl nospell]]

    --- Accelerate Esc presses
    vim.o.ttimeout = true -- enable timeout
    vim.o.ttimeoutlen = 50 -- timeout for keycodes
    vim.o.timeoutlen = 500 -- timeout for mappings

    --- Enable truecolors
    vim.o.termguicolors = true -- use trucolor in a terminal (i.e., use gui colors in a terminal)

    --- Stabilize window contents on window size change
    vim.o.splitkeep = "topline"

    --- Setup terminal colors
    vim.g.terminal_color_0 = "#1d1f21"
    vim.g.terminal_color_1 = "#cc6666"
    vim.g.terminal_color_2 = "#b5bd68"
    vim.g.terminal_color_3 = "#f0c674"
    vim.g.terminal_color_4 = "#81a2be"
    vim.g.terminal_color_5 = "#b294bb"
    vim.g.terminal_color_6 = "#8abeb7"
    vim.g.terminal_color_7 = "#c5c8c6"
    vim.g.terminal_color_8 = "#666666"
    vim.g.terminal_color_9 = "#d54e53"
    vim.g.terminal_color_10 = "#b9ca4a"
    vim.g.terminal_color_11 = "#e7c547"
    vim.g.terminal_color_12 = "#7aa6da"
    vim.g.terminal_color_13 = "#c397d8"
    vim.g.terminal_color_14 = "#70c0b1"
    vim.g.terminal_color_15 = "#eaeaea"
