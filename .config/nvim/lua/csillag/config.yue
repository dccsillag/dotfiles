-- Plugin configurations
do
    -- vimpeccable
    import 'vimp'
    vimp.always_override = true

    -- statusline
    my_theme = {
        a:
            bg: '#C8ACF6'
            fg: '#000000'
        b:
            bg: '#4F535A'
            fg: '#000000'
            gui: 'bold'
        c:
            bg: '#2F333A'
            fg: '#cccccc'
    }
    (require 'lualine').setup
        options:
            icons_enabled: false
            theme:
                normal: my_theme
                insert: my_theme
                visual: my_theme
                replace: my_theme
                command: my_theme
                inactive: my_theme
            component_separators:
                left: ''
                right: ''
            section_separators:
                left: ''
                right: ''
            always_divide_middle: true
            globalstatus: true
        sections:
            lualine_a: {'filename'}
            -- lualine_b: {'b:gitsigns_status'}
            lualine_b: {}
            lualine_c: {{
                'diff',
                colored: true
                -- diff_color:
                --     added: 'DiffAddStatus'
                --     modified: 'DiffChangeStatus'
                --     removed: 'DiffDeleteStatus'
                source: ->
                    s = vim.b.gitsigns_status_dict
                    {
                        added: s.added
                        modified: s.changed
                        removed: s.removed
                    } if s?
            }}
            lualine_x:
                * 'g:lsp_progress_msg'
                * {
                    'diagnostics',
                    colored: true
                    sections:
                        * 'error'
                        * 'warn'
                        * 'info'
                }
            lualine_y: {}
            lualine_z:
                * ->
                    ft = vim.o.filetype
                    has_lsp = #vim.lsp.buf_get_clients(0) > 0
                    if #ft == 0
                        ""
                    else
                        if has_lsp
                            ft .. "+"
                        else
                            ft
                * 'b:keymap_name'
        extensions:
            * 'aerial'
            * 'fzf'
            * 'fugitive'
            * 'quickfix'

    -- fzf-lua
    (require 'fzf-lua').setup
        fzf_opts:
            "--layout": 'default'
        keymap:
            builtin:
                "<C-l>": "toggle-preview"
            fzf:
                "ctrl-l": "toggle-preview"
        winopts:
            preview:
                hidden: 'hidden'
        lsp:
            severity: "warning"
            icons:
                "Error":
                    icon: "E"
                    color: "red"
                "Warning":
                    icon: "W"
                    color: "yellow"
                "Information":
                    icon: "I"
                    color: "blue"
                "Hint":
                    icon: "H"
                    color: "magenta"

    -- popui
    vim.ui.select = require "popui.ui-overrider"
    vim.g.popui_border_style = "rounded"

    -- specs
    global specs, should_show_specs, maybe_show_specs
    import 'specs'

    should_show_specs = false -- vim.fn.exists('neovide') == 0

    specs.setup
        show_jumps: should_show_specs
        min_jump: 2
        popup:
            delay_ms: 0
            inc_ms: 8
            blend: 60
            width: 25
            winhl: 'Specs'
            fader: specs.empty_fader
            resizer: specs.shrink_resizer
        ignore_filetypes:
            * "dashboard"
        ignore_buftypes:
            "nofile": true

    maybe_show_specs = -> specs.show_specs! if should_show_specs

    -- zen-mode
    (require 'zen-mode').setup!

    -- gitsigns
    (require 'gitsigns').setup
        signcolumn: false
        numhl: true
        linehl: false
        word_diff: true
        keymaps:
            noremap: true
            ['n [c']: { expr: true, "&diff ? '[c' : '<cmd>lua require\"gitsigns.actions\".prev_hunk()<CR>'" }
            ['n ]c']: { expr: true, "&diff ? ']c' : '<cmd>lua require\"gitsigns.actions\".next_hunk()<CR>'" }

            ["n <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk()<CR>'
            ["v <leader>gs"]: '<cmd>lua require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
            ["n <leader>gu"]: '<cmd>lua require"gitsigns".undo_stage_hunk()<CR>'
            ["n <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk()<CR>'
            ["v <leader>gx"]: '<cmd>lua require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})<CR>'
            -- ["n <leader>gX"]: '<cmd>lua require"gitsigns".reset_buffer()<CR>'
            ["n <leader>gd"]: '<cmd>lua require"gitsigns".preview_hunk()<CR>'
            ["n <leader>gb"]: '<cmd>lua require"gitsigns".blame_line{full = true}<CR>'

            ["o ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'
            ["x ih"]: ':<C-U>lua require"gitsigns.actions".select_hunk()<CR>'

    -- limelight
    vim.g.limelight_conceal_ctermfg = 242
    vim.g.limelight_conceal_guifg = '#606060'

    -- indent-blankline
    vim.g.indent_blankline_char = 'â”‚'
    vim.g.indent_blankline_show_trailing_blankline_indent = false
    vim.g.indent_blankline_buftype_exclude =
        * 'terminal'
    vim.g.indent_blankline_filetype_exclude =
        * 'dashboard'
        * 'packer'
        * 'help'
        * 'Outline'
        * 'aerial'

    -- nvim-treesitter-context
    (require 'treesitter-context').setup
        enable: true
        throttle: true
        max_lines: 4
        patterns:
            default:
                * "class"
                * "function"
                * "method"
                * "for"
                * "while"
                * "if"
                * "switch"
                * "case"
            rust:
                * "impl_item"
                * "struct_item"
                * "enum_item"
                * "match_arm"
                * "match_expression"
                * "else_clause"
                * "loop_expression"
                * "mod_item"

    -- context.vim
    -- vim.g.context_nvim_no_redraw = 1

    -- vim-matchup
    vim.g.matchup_matchparen_offscreen = {}

    -- nvim-notify
    vim.notify = require 'notify'
    vim.notify.setup
        stages: "slide"
        timeout: 1000

    -- nvim-pqf
    (require 'pqf').setup!

    -- vim-wordmotion
    vim.g.wordmotion_spaces = ''

    -- vim-localvimrc
    vim.g.localvimrc_persistent = 1
    vim.g.localvimrc_persistence_file = vim.fn.expand "~/.local/misc/localvimrc_persistent"

    -- suda.vim
    vim.g.suda_smart_edit = 1

    -- fugitive
    import map_command, nnoremap from require 'vimp'

    map_command 'Fugitive', ->
        vim.cmd ":G"
        vim.cmd "only"
        nnoremap {"buffer"}, "gq", ":qa!<CR>"

    -- magma-nvim
    vim.g.magma_automatically_open_output = false
    vim.g.magma_show_mimetype_debug = true
    vim.g.magma_image_provider = "ueberzug"

    -- vim-test
    vim.g['test#strategy'] = 'neovim'
    vim.g['test#neovim#start_normal'] = 1
    vim.g['test#basic#start_normal'] = 1

    -- nvim-cmp
    import 'cmp'
    cmp.setup
        -- completion:
        --     autocomplete: false
        mapping:
            "<C-c>": cmp.mapping.complete!
            "<C-l>": cmp.mapping.confirm select: true
            "<C-j>": cmp.mapping.select_next_item behaviour: cmp.SelectBehavior.Select
            "<C-k>": cmp.mapping.select_prev_item behaviour: cmp.SelectBehavior.Select
            "<C-h>": cmp.mapping.close!
        sources:
            * name: "crates"
            * name: "nvim_lsp"
            * name: "path"
            -- * name: "buffer"
        snippet:
            expand: (args) -> vim.fn["vsnip#anonymous"] args.body

    -- crates.nvim
    (require 'crates').setup!

    -- LSP
    do
        import 'lspconfig' as nvim_lsp

        capabilities = (require 'cmp_nvim_lsp').update_capabilities vim.lsp.protocol.make_client_capabilities!
        capabilities.window.workDoneProgress = true

        on_attach = (client) -> vim.notify "Ready.", "info", title: "LSP", timeout: 500

        -- Configure LSPs
        nvim_lsp.rust_analyzer.setup
            :capabilities
            :on_attach
            settings:
                ["rust-analyzer"]:
                    checkOnSave:
                        command: "clippy"
                        -- extraArgs:
                        --     * "--target-dir"
                        --     * ".target-rust_analyzer_check"
                    cargo:
                        loadOutDirsFromCheck: true
                    procMacro:
                        enable: true
                    diagnostics:
                        enable: false
        nvim_lsp.clangd.setup
            :capabilities
            :on_attach
            cmd:
                * "clangd"
                * "--background-index"
                * "--clang-tidy"
        nvim_lsp.sumneko_lua.setup
            :capabilities
            :on_attach
            cmd:
                * "lua-language-server"
                * "-E"
                * "/usr/share/lua-language-server/main.lua"
        -- nvim_lsp.pyright.setup
        --     :on_attach
        --     :capabilities
        nvim_lsp.pylsp.setup
            :on_attach
            :capabilities
        nvim_lsp.hls.setup
            :on_attach
            :capabilities
        nvim_lsp.texlab.setup
            :on_attach
            :capabilities
        nvim_lsp.vimls.setup
            :on_attach
            :capabilities
        nvim_lsp.rnix.setup
            :on_attach
            :capabilities

        vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with vim.lsp.diagnostic.on_publish_diagnostics,
                virtual_text: false
                underline: true
                signs: false
                update_in_insert: true

        -- Based on https://git.sr.ht/~whynothugo/lsp_lines.nvim/tree/main/item/lua/lsp_lines/init.lua:
        indentation_regex = vim.regex [[^\s\+]]
        highlight_groups =
            [vim.diagnostic.severity.ERROR]: "DiagnosticVirtualTextError"
            [vim.diagnostic.severity.WARN]: "DiagnosticVirtualTextWarn"
            [vim.diagnostic.severity.INFO]: "DiagnosticVirtualTextInfo"
            [vim.diagnostic.severity.HINT]: "DiagnosticVirtualTextHint"
        get_indentation_for_line = (bufnr, lnum) ->
            lines = vim.api.nvim_buf_get_lines bufnr, lnum, lnum + 1, false
            line = lines[1]
            out = ""
            for i = 1, #line
                switch line\sub i, i
                    when ' '
                        if (i-1) % 4 == 0
                            out ..= vim.g.indent_blankline_char
                            -- out ..= "â”Š"
                        else
                            out ..= " "
                    when '\t'
                        out ..= "\t"
                    else
                        break
            out
        vim.diagnostic.handlers.virtual_lines =
            show: (namespace, bufnr, diagnostics, opts) ->
                vim.validate
                    namespace: {namespace, 'n'}
                    bufnr: {bufnr, 'n'}
                    diagnostics: {diagnostics, vim.tbl_islist, "a list of diagnostics"}
                    opts: {opts, 't', true}

                ns = vim.diagnostic.get_namespace namespace
                ns.user_data.virt_lines_ns = vim.api.nvim_create_namespace "" if not ns.user_data.virt_lines_ns
                virt_lines_ns = ns.user_data.virt_lines_ns

                vim.api.nvim_buf_clear_namespace bufnr, virt_lines_ns, 0, -1

                prefix = "^"

                for id, diagnostic in ipairs diagnostics
                    virt_lines = {}
                    lprefix = prefix
                    indentation = get_indentation_for_line bufnr, diagnostic.lnum
                    for diag_line in diagnostic.message\gmatch("([^\n]+)")
                        table.insert virt_lines, {
                            {
                                indentation,
                                "VirtualIndentBlanklineChar",
                            },
                            {
                                lprefix .. " " .. diag_line,
                                highlight_groups[diagnostic.severity],
                            },
                        }
                        lprefix = string.rep(" ", #prefix)

                    vim.api.nvim_buf_set_extmark bufnr, virt_lines_ns, diagnostic.lnum, 0, :id, :virt_lines
            hide: (namespace, bufnr) ->
                ns = vim.diagnostic.get_namespace namespace
                vim.api.nvim_buf_clear_namespace bufnr, ns.user_data.virt_lines_ns, 0, -1 if ns.user_data.virt_lines_ns

    -- treesitter
    (require 'nvim-treesitter.configs').setup
        highlight:
            enable: true
            additional_vim_regex_highlighting: false
        incremental_selection:
            enable: true
            keymaps:
                init_selection: 'g.'
                node_decremental: ','
                node_incremental: '.'
        textsubjects:
            enable: true
            prev_selection: '`'
            keymaps:
                ["<CR>"]: 'textsubjects-smart'
                -- ["o<CR>"]: 'textsubjects-container-outer'
                -- ["i<CR>"]: 'textsubjects-container-inner'
        playground:
            enable: true
        indent:
            enable: false -- currently, this is broken.

    -- aerial
    (require 'aerial').setup
        backends:
            * "treesitter"
            * "markdown"
            * "lsp"
        close_behaviour: "close"
        default_direction: "float"
        float:
            border: "rounded"
            relative: "editor"
            override: (conf) ->
                local stats = vim.api.nvim_list_uis![1]
                local width = stats.width
                local height = stats.height - 1 -- to account for the statusline
                local padding_x = math.floor(0.1 * width)
                local padding_y = math.floor(0.1 * height)

                conf.width = width - 2*padding_x
                conf.height = height - 2*padding_y
                conf.row = padding_y - 1
                conf.col = padding_x - 1
                conf.anchor = "NW"

                conf
        min_width: 60
        filter_kind:
            * "Class"
            * "Constructor"
            * "Enum"
            * "Function"
            * "Interface"
            * "Module"
            * "Method"
            * "Struct"
        nerd_font: false
        -- TODO post_jump_cmd       call beacon
        close_on_select: true
        show_guides: false

    -- Comment.nvim
    (require 'Comment').setup!

    -- pear-tree
    vim.g.pear_tree_repeatable_expand = 0

    global all_peartree_pairs
    all_peartree_pairs =
        basic_pairs: -- parentheses, bracktes, etc.
            ["("]: closer: ")"
            ["["]: closer: "]"
            ["{"]: closer: "}"
        quotes_and_apostrophes: -- quotes, apostrophes, etc.
            ["\""]: closer: "\""
            ["'"]: closer: "'"
            ["`"]: closer: "`"
        math_dolars: -- inline&display math
            ["$"]: closer: "$"
            ["$$"]: closer: "$$"
        texmath: -- TeX Math
            -- -- delimiters
            ["\\\\("]: closer: "\\\\)"
            ["\\\\["]: closer: "\\\\]"
            ["\\\\left("]: closer: "\\\\right)"
            ["\\\\left["]: closer: "\\\\right]"
            ["\\\\{"]: closer: "\\\\}"
            ["\\\\left\\\\{"]: closer: "\\\\right\\\\}"
            ["\\\\lceil"]: closer: "\\\\rceil"
            ["\\\\left\\\\lceil"]: closer: "\\\\right\\\\rceil"
            ["\\\\lfloor"]: closer: "\\\\rfloor"
            ["\\\\left\\\\lfloor"]: closer: "\\\\right\\\\rfloor"
            ["\\\\lvert"]: closer: "\\\\rvert"
            ["\\\\left\\\\lvert"]: closer: "\\\\right\\\\rvert"
            ["\\\\lVert"]: closer: "\\\\rVert"
            ["\\\\left\\\\lVert"]: closer: "\\\\right\\\\rVert"
            -- -- multi-args
            ["\\\\frac"]: closer: "{}{}"
            ["\\\\inn"]: closer: "{}{}"
            ["\\\\diff"]: closer: "{}{}"
            ["\\\\pdiff"]: closer: "{}{}"
            ["\\\\sqrt["]: closer: "]{}"
            -- -- LaTeX environments
            ["\\\\begin{*}"]: closer: "\\\\end{*}", until: "}"
        xml: -- XML tags
            ["<!--"]: closer: "-->"
            ["<*>"]: closer: "</*>", until: "\\W"
        markdown: -- Markdown formatting
            ["\\*"]: closer: "\\*"
            ["\\*\\*"]: closer: "\\*\\*"
            ["```"]: closer: "```"
            [":::"]: closer: ":::"
        templates: -- c++ templates / rust type variables
            ["<"]: closer: ">", not_at: {"\\W", "^"}

    global pairs_per_filetype, set_pairs_for_filetype
    pairs_per_filetype =
        xml:        {'xml'}
        html:       {'xml'}
        tex:        {'basic_pairs', 'math_dolars', 'texmath'}
        markdown:   {'basic_pairs', 'math_dolars', 'markdown', 'xml'}
        python:     {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        rust:       {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        cpp:        {'basic_pairs', 'quotes_and_apostrophes', 'templates'}
        python:     {'basic_pairs', 'quotes_and_apostrophes'}
        -- TODO: javascript
        -- TODO: haskell
        -- TODO: lua
    set_pairs_for_filetype = (filetype) ->
        outpairs = {}
        pair_names_for_filetype = pairs_per_filetype[filetype]
        if pair_names_for_filetype == nil
            outpairs = vim.g.pear_tree_pairs
        else
            for _, subpairs_name in ipairs pair_names_for_filetype
                subpairs = all_peartree_pairs[subpairs_name]
                for k, v in pairs subpairs
                    outpairs[k] = v
        vim.b.pear_tree_pairs = outpairs

    vim.cmd [[autocmd FileType * lua set_pairs_for_filetype(vim.o.filetype)]]

    vim.g.pear_tree_pairs = basic_pairs

    -- vim-table-mode
    vim.g.table_mode_map_prefix = '<Leader><Bar>'
    vim.g.table_mode_toggle_map = '<Bar>'

    -- python-syntax
    vim.g.python_version_2                          = false
    vim.g.python_highlight_builtins                 = true
    vim.g.python_highlight_builtin_objs             = true
    vim.g.python_highlight_builtin_types            = true
    vim.g.python_highlight_builtin_funcs            = true
    vim.g.python_highlight_builtin_funcs_kwarg      = false
    vim.g.python_highlight_exceptions               = true
    vim.g.python_highlight_string_formatting        = true
    vim.g.python_highlight_string_format            = true
    vim.g.python_highlight_string_templates         = true
    vim.g.python_highlight_indent_errors            = false
    vim.g.python_highlight_space_errors             = false
    vim.g.python_highlight_doctests                 = true
    vim.g.python_highlight_func_calls               = false
    vim.g.python_highlight_class_vars               = true
    vim.g.python_highlight_operators                = true
    vim.g.python_highlight_file_headers_as_comments = true

    -- vim-cpp-modern
    vim.g.cpp_no_function_highlight        = false
    vim.g.cpp_named_requirements_highlight = true

    -- vim-markdown
    vim.g.markdown_enable_insert_mode_leader_mappings = false

    -- headlines.nvim
    (require 'headlines').setup!

    -- moonscript-vim
    -- the official YueScript syntax is too slow for me, so I'll use MoonScript syntax for YueScript
    --   (they are similar enough, I think it'll be fine).
    vim.cmd [[autocmd BufNewFile,BufRead *.yue setf moon]]

-- Lots of Vim options
do
    -- Set the regex engine
    vim.o.regexpengine = 1

    --- Enable the mouse
    vim.o.mouse = 'a' -- enable all mouse features

    --- Setup statusbar
    vim.o.showmode = false -- don't show the current mode below the statusbar
    vim.o.laststatus = 3 -- use a global statusline
    -- vim.o.statusline = [[%h%w%q%f %r %m (%L lines) @ %l:%c (%p%%)%=%y LSP]] -- set the statusline to a horizontal separator
    vim.o.ruler = false -- remove the ruler

    --- Hide tabbar
    vim.o.showtabline = 1 -- never show the tabline

    --- Setup :grep
    vim.o.grepprg = [[rg --vimgrep --hidden --glob '!.git']]

    --- Setup line wrap
    vim.o.wrap = false -- wrap lines
    vim.o.linebreak = true -- don't break words on wrap
    vim.o.breakindent = true -- indent wrapped lines
    vim.o.showbreak = "â€¦ " -- prefix for wrapped lines

    --- Set "start of line" mode
    vim.o.startofline = true

    --- Set case sensitiveness of the search
    vim.o.ignorecase = true -- by default, case insensitive
    vim.o.smartcase = true -- but if there are capital letters, then case sensitive

    --- Setup the foldcolumn
    vim.o.foldcolumn = 'auto:5' -- automatically manage foldcolumn width

    --- Show the signcolumn
    vim.o.signcolumn = 'auto:1-3' -- automatically resize signcolumn to show at most 3 signs, and at least 1 sign

    --- Show line numbers
    vim.o.number = true -- show line numbers
    vim.o.numberwidth = 1 -- use the least amount of space for the line numbers

    --- Setup folding
    vim.o.foldenable = false -- disable folding
    vim.o.foldminlines = 1 -- require at least 10 lines of content to create a fold
    vim.o.foldnestmax = 5 -- set maximum amount of fold nesting

    --- Use 4 spaces instead of tabs
    vim.o.expandtab = true -- expand tabs
    vim.o.shiftwidth = 4   -- how many sapces to use for >> and <<
    vim.o.softtabstop = 4  -- how many sapces to use for tab

    --- Keep indentation structure
    vim.o.autoindent = true -- use same indentation level for the neighbouring lines
    vim.o.cinoptions = [[L0,N-s,E-s,(0,mN,j1,J1,P1]] -- setup better C/C++ autoindent

    --- Highlight past the textwidth
    vim.o.colorcolumn = '+1' -- highlight the column after the one specified in 'textwidth'

    -- Highlight the current line
    vim.o.cursorline = true -- show the cursorline

    --- Set the updatetime
    vim.o.updatetime = 500 -- how much time between updates, in ms

    --- Remove the bell sound
    vim.o.belloff = 'all' -- disable the bell everywhere

    --- Fix backspace
    vim.o.backspace = "2" -- when in insert mode, backspace will remove indentation and newlines

    --- Open new vertical splits to the right and horizontal splits below
    vim.o.splitright = true -- open new vertical splits to the right
    vim.o.splitbelow = true -- open new horizontal splits below

    --- Setup undo persistence
    vim.o.undofile = true -- save undos to an undo file

    --- Allow hidden buffers
    vim.o.hidden = true -- hide buffers when leaving them, instead of deleting them

    --- Setup views
    vim.o.viewoptions = 'cursor' -- save only the cursor position in a view

    --- Highlight search results
    vim.o.hlsearch = true -- highlight search results

    --- Setup search wrapping
    vim.o.wrapscan = false -- disable search wrapping

    --- Preview search/substitute pattern matches
    vim.o.incsearch = true -- live preview search results
    vim.o.inccommand = 'nosplit' -- live preview command (:s, :g, etc.) results

    --- Show possible Ex command completions above
    vim.o.wildmenu = true -- show completion menu in Ex commands

    --- Setup conceal
    vim.o.concealcursor = '' -- don't conceal the current line in any mode
    vim.o.conceallevel = 2 -- conceal everything, hiding concealed text completely

    --- Show trailing whitespace and tabs
    vim.o.list = true -- show listchars
    vim.o.listchars = [[tab:--,trail:â”ˆ]] -- highlight tabs and trailing whitespace

    -- Remove `~` sign from filler lines
    vim.o.fillchars = [[eob: ,stl: ,stlnc: ]]

    --- Setup autocompletion in a way that is better
    vim.o.completeopt = 'menuone,noinsert,noselect' -- menuone: show a menu even if there's only one match
                                                    -- noinsert: only insert when we select
                                                    -- noselect: no automatic selection
    vim.o.complete = '.,i,d' -- look for completions in the current buffer (.) and in the included files (i,d)

    --- Setup verbosity
    vim.o.shortmess = [[filnxtToOFcI]] -- don't show messages regarding completion

    --- Always keep 2 lines around the cursor
    vim.o.scrolloff = 4 -- keep 2 lines above&below the cursor at all times

    --- Setup sessions
    vim.o.sessionoptions = [[blank,buffers,curdir,help,tabpages,winsize,tabpages,globals]]

    --- Setup spellcheck
    vim.o.spelllang = 'en_us,pt_br'

    --- Accelerate Esc presses
    vim.o.ttimeout = true -- enable timeout
    vim.o.ttimeoutlen = 50 -- timeout for keycodes
    vim.o.timeoutlen = 500 -- timeout for mappings

    --- Enable truecolors
    vim.o.termguicolors = true -- use trucolor in a terminal (i.e., use gui colors in a terminal)

    --- Setup terminal colors
    vim.g.terminal_color_0 = "#1d1f21"
    vim.g.terminal_color_1 = "#cc6666"
    vim.g.terminal_color_2 = "#b5bd68"
    vim.g.terminal_color_3 = "#f0c674"
    vim.g.terminal_color_4 = "#81a2be"
    vim.g.terminal_color_5 = "#b294bb"
    vim.g.terminal_color_6 = "#8abeb7"
    vim.g.terminal_color_7 = "#c5c8c6"
    vim.g.terminal_color_8 = "#666666"
    vim.g.terminal_color_9 = "#d54e53"
    vim.g.terminal_color_10 = "#b9ca4a"
    vim.g.terminal_color_11 = "#e7c547"
    vim.g.terminal_color_12 = "#7aa6da"
    vim.g.terminal_color_13 = "#c397d8"
    vim.g.terminal_color_14 = "#70c0b1"
    vim.g.terminal_color_15 = "#eaeaea"
