import applyKeymaps from require 'nest'

-- vim.cmd [[cabbrev q qa]]
vim.cmd [[cabbrev q Bdelete]]

EXPR_PREFIX = '<expr>'
RECURSIVE_PREFIX = '<rec>'
NOWAIT_PREFIX = '<nowait>'
VISUAL_PREFIX = '<visual>'
INSERT_PREFIX = '<insert>'
TERMINAL_PREFIX = '<terminal>'
myKeymaps = (maps) ->
    out = {}
    for k, v in pairs maps
        local mode
        if k\sub(1, #VISUAL_PREFIX) == VISUAL_PREFIX
            k = k\sub(#VISUAL_PREFIX+1, #k)
            mode = 'v'
        elseif k\sub(1, #INSERT_PREFIX) == INSERT_PREFIX
            k = k\sub(#INSERT_PREFIX+1, #k)
            mode = 'i'
        elseif k\sub(1, #TERMINAL_PREFIX) == INSERT_PREFIX
            k = k\sub(#TERMINAL_PREFIX+1, #k)
            mode = 't'
        else
            mode = 'n'

        local expr
        if k\sub(1, #EXPR_PREFIX) == EXPR_PREFIX
            k = k\sub(#EXPR_PREFIX+1, #k)
            expr = true
        else
            expr = false

        local noremap
        if k\sub(1, #RECURSIVE_PREFIX) == RECURSIVE_PREFIX
            k = k\sub(#RECURSIVE_PREFIX+1, #k)
            noremap = false
        else
            noremap = true

        local nowait
        if k\sub(1, #NOWAIT_PREFIX) == NOWAIT_PREFIX
            k = k\sub(#NOWAIT_PREFIX+1, #k)
            nowait = true
        else
            nowait = false

        if type(v) == 'table'
            v = myKeymaps v

        out[#out+1] =
            * k
            * v
            :mode
            options:
                :expr
                :noremap
                :nowait
    out

vimcmd = (cmd) -> '<cmd>' .. cmd .. '<CR>'
luacmd = (cmd) -> '<cmd>lua ' .. cmd .. '<CR>'
dapcmd = (cmd) -> luacmd 'if require"dap".session() ~= nil then ' .. cmd .. ' else print("no DAP session!") end'
plug = (op) -> '<Plug>(' .. op .. ')'
addspecs = (op) -> op -- addspecs = (op) -> op .. ':lua maybe_show_specs()<CR>'
telescope = (provider) -> vimcmd 'Telescope ' .. provider
fzflua = (provider) -> vimcmd 'FzfLua ' .. provider
blankline = (op) -> op .. '<CMD>IndentBlanklineRefresh<CR>'

is_jujutsu = () -> (vim.fn.isdirectory ".jj") == 1

applyKeymaps myKeymaps
    -- Redraw
    '<C-r>': ->
        vim.cmd 'IndentBlanklineRefresh'
        vim.cmd 'redraw'
    -- Redo
    'U': vimcmd "silent redo"
    'u': vimcmd "silent undo"

    -- LSP
    'gd': -> vim.lsp.buf.definition!
    'gr': telescope "lsp_references"
    'gR': -> vim.lsp.buf.references!
    'gq': -> vim.lsp.buf.formatting!

    '[g': -> vim.diagnostic.goto_prev wrap: false, float: false
    ']g': -> vim.diagnostic.goto_next wrap: false, float: false

    '[t': plug 'ultest-prev-fail'
    ']t': plug 'ultest-next-fail'

    -- Completion
    '<insert><C-c>': '<C-x><C-o>' -- open completion meno
    '<insert><C-l>': '<C-y>' -- select completion
    '<insert><C-j>': '<C-n>'
    '<insert><C-k>': '<C-p>'
    '<insert><C-h>': '<C-e>' -- close completion meno

    -- :cn and :cp
    '[q': vimcmd 'cp'
    ']q': vimcmd 'cn'

    '<Leader>':
        -- LSP
        'l':
            'h': -> vim.lsp.buf.hover!
            'g': telescope "lsp_dynamic_workspace_symbols"
            'G': telescope "lsp_document_symbols"
            'i': telescope "lsp_implementations"
            -- 'd': telescope 'lsp_definitions'
            -- 'd': -> vim.diagnostic.open_float
            --     source: true
            --     -- header:
            --     -- format:
            --     -- prefix:
            --     border: "rounded"
            'd': telescope "diagnostics"
            'D': telescope "diagnostics bufnr=0"
            'r': -> vim.lsp.buf.rename!
            'a': -> vim.lsp.buf.code_action()
            '<visual>a': -> vim.lsp.buf.range_code_action()
            't': -> (require "lsp_lines").toggle!
            'N': -> vim.diagnostic.goto_prev wrap: false, float: false
            'n': -> vim.diagnostic.goto_next wrap: false, float: false

        -- FZF
        'e': ->
            if is_jujutsu! then
                (require "easypick").one_off "jj file list"
            else
                vim.cmd 'Telescope git_files'
        'D': vimcmd "EditDotFile"
        'E': telescope 'find_files'
        'H': telescope 'help_tags'
        'F': telescope 'filetypes'
        's': telescope 'live_grep'

        -- toggle file and buffer tree
        'f': vimcmd 'Neotree focus toggle filesystem'
        'b': vimcmd 'Neotree focus toggle buffers'

        -- cd
        'c': telescope 'zoxide list'

        -- code runner
        'R': ->
            local f = io.open "run.sh", "rb"
            local command
            if f then
                f\close!

                command = "./run.sh"
            else
                print "Using default run command for filetype '" .. vim.o.filetype .. "'"
                switch vim.o.filetype
                    when "python"
                        command = "python %"
                    when "rust"
                        command = "cargo run"
                    when "lua"
                        command = "lua %"
                    when "nail"
                        command = "nail run %"
                    when "sh"
                        command = "bash %"
                    when "haskell"
                        command = "stack runhaskell %"
                    when "typst"
                        command = "typst watch %"
                    else
                        print "No default run command for filetype '" .. vim.o.filetype .. "'; please add to config.yue or create a run.sh"
                        return

            -- vim.cmd "split term://" .. command
            vim.cmd "e term://" .. command

        -- magma-nvim
        -- 'r': vimcmd 'MoltenEvaluateOperator'
        -- 'r':
        --     '<expr>': -> (require "magma").run_code_operator!
        --     'r': -> (require "magma").run_code_line!
        --     'o': -> (require 'magma').show_output!
        --     -- '<expr>': 'nvim_exec("MagmaEvaluateOperator", v:true)'
        --     -- '<visual>': ':<C-u>MagmaEvaluateVisual<CR>'
        --     -- 'r': vimcmd 'MagmaEvaluateLine'
        --     -- 'c': vimcmd 'MagmaReevaluateCell'
        --     -- 'd': vimcmd 'MagmaDelete'
        --     -- 'o': vimcmd 'MagmaShowOutput'
        --     -- 'n': vimcmd 'MagmaInit'

        -- ultest
        't':
            'o': luacmd 'require"neotest".output.open({ enter = true })'
            't': luacmd 'require"neotest".summary.toggle()'
            'n': luacmd 'require"neotest".run.run()'
            'a': luacmd 'require"neotest".run.run{suite = true}'
            'f': luacmd 'require"neotest".run.run(vim.fn.expand("%"))'
            'd': luacmd 'require"neotest".run.run({strategy = "dap"})'
            'D': luacmd 'require"neotest".run.attach()'
            's': luacmd 'require"neotest".run.stop()'
            'l': luacmd 'require"neotest".run.run_last()'
        'd':
            'd': ->
                import 'dapui'
                dapui.toggle!
            'b': luacmd 'require"dap".toggle_breakpoint()'
            'j': dapcmd 'require"dap".step_over()'
            'l': dapcmd 'require"dap".step_into()'
            'h': dapcmd 'require"dap".step_out()'
            'c': dapcmd 'require"dap".continue()'
            'r': dapcmd 'require"dap".repl.open()'
            'v': dapcmd 'require"dapui".eval()'

        -- 'G': vimcmd 'tab G' -- open fugitive
        'G': -> -- open jujutsu (via jjui) or fugitive
            if is_jujutsu! then
                -- Looks like it's a jujutsu repo! Open jjui.
                -- vim.cmd "tabedit term://jj log --color=always --no-pager \\| tac; echo; jj st --color=always --no-pager; echo; zsh"
                vim.cmd "tabedit term://~/.local/scripts/jjenv.sh"
                vim.cmd "startinsert"
            else
                -- Open Fugitive.
                vim.cmd "tab G"

        -- ';': luacmd 'specs.show_specs()' -- highlight the cursor

        -- 'S': vimcmd 'set spell!' -- toggle spell
        -- 's': ':set spelllang=' -- set spell language

        'p': luacmd 'open_corresponding_pdf()' -- open corresponding PDF for the current [markup file]

        '.': vimcmd 'nohl' -- :nohl

        -- 'o': -- open windows
        --     'c': vimcmd 'copen' -- open quickfix window
        --     't': vimcmd 'Trouble' -- open trouble window
        -- 'q': -- close windows
        --     'c': vimcmd 'cclose' -- close quickfix window
        --     't': vimcmd 'TroubleClose' -- close trouble window
        'q': vimcmd 'Bdelete'

        'n': vimcmd 'set number!' -- toggle line numbers

        'T': -> -- open taskell
            vim.cmd "tabedit term://taskell"
            vim.cmd "startinsert"

        "g":
            "s": luacmd 'require"gitsigns.actions".stage_hunk()'
            "<visual>s": luacmd 'require"gitsigns".stage_hunk({vim.fn.line("."), vim.fn.line("v")})'
            "u": luacmd 'require"gitsigns.actions".undo_stage_hunk()'
            "x": luacmd 'require"gitsigns.actions".reset_hunk()'
            "<visual>x": luacmd 'require"gitsigns".reset_hunk({vim.fn.line("."), vim.fn.line("v")})'
            "d": luacmd 'require"gitsigns".preview_hunk()'
            "w": luacmd 'require"gitsigns".blame_line{full = true}'
            "b": telescope "git_branches"

            "g": ->
                vim.cmd "tabedit term://jj split"
                vim.cmd "startinsert"

    "[c": luacmd 'require"gitsigns.actions".prev_hunk()'
    "]c": luacmd 'require"gitsigns.actions".next_hunk()'

    -- spell suggest
    -- 'z=': fzflua 'spell_suggest'

    -- substitute
    '<C-s>':
        '<rec>':      plug 'SubversiveSubstitute'
        '<rec><C-s>': plug 'SubversiveSubstituteLine'

    -- dial.nvim
    '<rec><C-a>':         plug 'dial-increment'
    '<rec><C-x>':         plug 'dial-decrement'
    '<rec><visual><C-a>': plug 'dial-increment'
    '<rec><visual><C-x>': plug 'dial-decrement'
    '<rec>g<C-a>':        plug 'dial-increment-additional'
    '<rec>g<C-x>':        plug 'dial-decrement-additional'

    'g':
        -- misc window operations
        'w': "<C-w>"

        -- -- text alignment
        -- 'a':
        --     '=': vimcmd [[Tabularize /=]]
        --     ':': vimcmd [[Tabularize /:\zs]]
        --     ' ': vimcmd [[Tabularize /,\zs]]

    'z':
        -- open aerial view
        -- 'g': vimcmd 'AerialOpen'
        'o': blankline 'zo'
        'O': blankline 'zO'
        'c': blankline 'zc'
        'C': blankline 'zC'
        'a': blankline 'za'
        'A': blankline 'zA'
        'v': blankline 'zv'
        'x': blankline 'zx'
        'X': blankline 'zX'
        'm': blankline 'zm'
        'M': blankline(luacmd "require'ufo'.closeAllFolds()")
        'r': blankline 'zr'
        'R': blankline(luacmd "require'ufo'.openAllFolds()")

    -- specs & asterisk
    'n': addspecs 'n'
    'N': addspecs 'N'
    '<rec>*': addspecs plug 'asterisk-*'
    '<rec>#': addspecs plug 'asterisk-#'
    '<rec>g*': addspecs plug 'asterisk-g*'
    '<rec>g#': addspecs plug 'asterisk-g#'
    '<rec>z*': addspecs plug 'asterisk-z*'
    '<rec>z#': addspecs plug 'asterisk-z#'
    '<rec>gz*': addspecs plug 'asterisk-gz*'
    '<rec>gz#': addspecs plug 'asterisk-gz#'

    -- swap "go to mark" maps
    "'": "`"
    "`": "'"

    -- Make Y work like D
    'Y': 'y$'

    -- Map Q to a nop
    'Q': '<nop>'

    -- Change S to behave kinda like X
    'S': '"_Xi<CR><Esc>l'

    -- Change s to ys (normal) / S (visual)
    '<rec>s': 'ys'
    '<visual><rec>s': 'S'

    -- Change o/O to not insert text at multiple lines, when used with a count
    'O': luacmd "insert_line_above()"
    'o': luacmd "insert_line_below()"

    -- Disable suspend
    '<C-z>': '<nop>'

    -- Map <C-6> to <C-^> (for GUIs)
    '<C-6>': '<C-^>'

    '<Leader>[': vimcmd 'BufferPrevious'
    '<Leader>]': vimcmd 'BufferNext'
    '<Leader>{': vimcmd 'BufferMovePrevious'
    '<Leader>}': vimcmd 'BufferMoveNext'

    '<C-+>': increase_font_size
    '<C-=>': increase_font_size
    '<C-->': decrease_font_size
    '<C-0>': reset_font_size
